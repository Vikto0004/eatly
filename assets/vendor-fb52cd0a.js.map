{"version":3,"file":"vendor-fb52cd0a.js","sources":["../../node_modules/@firebase/util/dist/index.esm2017.js","../../node_modules/@firebase/component/dist/esm/index.esm2017.js","../../node_modules/@firebase/logger/dist/esm/index.esm2017.js","../../node_modules/idb/build/wrap-idb-value.js","../../node_modules/idb/build/index.js","../../node_modules/@firebase/app/dist/esm/index.esm2017.js","../../node_modules/firebase/app/dist/esm/index.esm.js","../../node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw new DecodeBase64StringError();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass DecodeBase64StringError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'DecodeBase64StringError';\r\n    }\r\n}\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n * @public\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\r\n/**\r\n * Attempt to read defaults from a JSON string provided to\r\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\r\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\r\n * The dots are in parens because certain compilers (Vite?) cannot\r\n * handle seeing that variable in comments.\r\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\r\n */\r\nconst getDefaultsFromEnvVariable = () => {\r\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\r\n        return;\r\n    }\r\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\r\n    if (defaultsJsonString) {\r\n        return JSON.parse(defaultsJsonString);\r\n    }\r\n};\r\nconst getDefaultsFromCookie = () => {\r\n    if (typeof document === 'undefined') {\r\n        return;\r\n    }\r\n    let match;\r\n    try {\r\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\r\n    }\r\n    catch (e) {\r\n        // Some environments such as Angular Universal SSR have a\r\n        // `document` object but error on accessing `document.cookie`.\r\n        return;\r\n    }\r\n    const decoded = match && base64Decode(match[1]);\r\n    return decoded && JSON.parse(decoded);\r\n};\r\n/**\r\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\r\n * (1) if such an object exists as a property of `globalThis`\r\n * (2) if such an object was provided on a shell environment variable\r\n * (3) if such an object exists in a cookie\r\n * @public\r\n */\r\nconst getDefaults = () => {\r\n    try {\r\n        return (getDefaultsFromGlobal() ||\r\n            getDefaultsFromEnvVariable() ||\r\n            getDefaultsFromCookie());\r\n    }\r\n    catch (e) {\r\n        /**\r\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\r\n         * to any environment case we have not accounted for. Log to\r\n         * info instead of swallowing so we can find these unknown cases\r\n         * and add paths for them if needed.\r\n         */\r\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\r\n        return;\r\n    }\r\n};\r\n/**\r\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\r\n/**\r\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\r\n * for the given product.\r\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\r\n * @public\r\n */\r\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\r\n    const host = getDefaultEmulatorHost(productName);\r\n    if (!host) {\r\n        return undefined;\r\n    }\r\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\r\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\r\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\r\n    }\r\n    // eslint-disable-next-line no-restricted-globals\r\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\r\n    if (host[0] === '[') {\r\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\r\n        return [host.substring(1, separatorIndex - 1), port];\r\n    }\r\n    else {\r\n        return [host.substring(0, separatorIndex), port];\r\n    }\r\n};\r\n/**\r\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\r\n * @public\r\n */\r\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\r\n/**\r\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\r\n * prefixed by \"_\")\r\n * @public\r\n */\r\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected or specified.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    var _a;\r\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\r\n    if (forceEnvironment === 'node') {\r\n        return true;\r\n    }\r\n    else if (forceEnvironment === 'browser') {\r\n        return false;\r\n    }\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        !!navigator.userAgent &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    try {\r\n        return typeof indexedDB === 'object';\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\r\n * @internal\r\n */\r\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\r\n    const deferredPromise = new Deferred();\r\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\r\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\r\n    return deferredPromise.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n * Generates a new uuid.\r\n * @public\r\n */\r\nconst uuidv4 = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, DecodeBase64StringError, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getDefaultAppConfig, getDefaultEmulatorHost, getDefaultEmulatorHostnameAndPort, getDefaults, getExperimentalSetting, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, promiseWithTimeout, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, uuidv4, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, isBrowser, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\r\n}\n\nconst name$p = \"@firebase/app\";\nconst version$1 = \"0.10.5\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$o = \"@firebase/app-compat\";\n\nconst name$n = \"@firebase/analytics-compat\";\n\nconst name$m = \"@firebase/analytics\";\n\nconst name$l = \"@firebase/app-check-compat\";\n\nconst name$k = \"@firebase/app-check\";\n\nconst name$j = \"@firebase/auth\";\n\nconst name$i = \"@firebase/auth-compat\";\n\nconst name$h = \"@firebase/database\";\n\nconst name$g = \"@firebase/database-compat\";\n\nconst name$f = \"@firebase/functions\";\n\nconst name$e = \"@firebase/functions-compat\";\n\nconst name$d = \"@firebase/installations\";\n\nconst name$c = \"@firebase/installations-compat\";\n\nconst name$b = \"@firebase/messaging\";\n\nconst name$a = \"@firebase/messaging-compat\";\n\nconst name$9 = \"@firebase/performance\";\n\nconst name$8 = \"@firebase/performance-compat\";\n\nconst name$7 = \"@firebase/remote-config\";\n\nconst name$6 = \"@firebase/remote-config-compat\";\n\nconst name$5 = \"@firebase/storage\";\n\nconst name$4 = \"@firebase/storage-compat\";\n\nconst name$3 = \"@firebase/firestore\";\n\nconst name$2 = \"@firebase/vertexai-preview\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"10.12.2\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$p]: 'fire-core',\r\n    [name$o]: 'fire-core-compat',\r\n    [name$m]: 'fire-analytics',\r\n    [name$n]: 'fire-analytics-compat',\r\n    [name$k]: 'fire-app-check',\r\n    [name$l]: 'fire-app-check-compat',\r\n    [name$j]: 'fire-auth',\r\n    [name$i]: 'fire-auth-compat',\r\n    [name$h]: 'fire-rtdb',\r\n    [name$g]: 'fire-rtdb-compat',\r\n    [name$f]: 'fire-fn',\r\n    [name$e]: 'fire-fn-compat',\r\n    [name$d]: 'fire-iid',\r\n    [name$c]: 'fire-iid-compat',\r\n    [name$b]: 'fire-fcm',\r\n    [name$a]: 'fire-fcm-compat',\r\n    [name$9]: 'fire-perf',\r\n    [name$8]: 'fire-perf-compat',\r\n    [name$7]: 'fire-rc',\r\n    [name$6]: 'fire-rc-compat',\r\n    [name$5]: 'fire-gcs',\r\n    [name$4]: 'fire-gcs-compat',\r\n    [name$3]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    [name$2]: 'fire-vertex',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * @internal\r\n */\r\nconst _serverApps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    for (const serverApp of _serverApps.values()) {\r\n        _addComponent(serverApp, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n *\r\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\r\n *\r\n * @returns true if the provide object is of type FirebaseApp.\r\n *\r\n * @internal\r\n */\r\nfunction _isFirebaseApp(obj) {\r\n    return obj.options !== undefined;\r\n}\r\n/**\r\n *\r\n * @param obj - an object of type FirebaseApp.\r\n *\r\n * @returns true if the provided object is of type FirebaseServerAppImpl.\r\n *\r\n * @internal\r\n */\r\nfunction _isFirebaseServerApp(obj) {\r\n    return obj.settings !== undefined;\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call initializeApp() first',\r\n    [\"bad-app-name\" /* AppError.BAD_APP_NAME */]: \"Illegal App name: '{$appName}'\",\r\n    [\"duplicate-app\" /* AppError.DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* AppError.APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"server-app-deleted\" /* AppError.SERVER_APP_DELETED */]: 'Firebase Server App has been deleted',\r\n    [\"no-options\" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\r\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"finalization-registry-not-supported\" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\r\n    [\"invalid-server-app-environment\" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */]: 'FirebaseServerApp is not for use in browser environments.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseServerAppImpl extends FirebaseAppImpl {\r\n    constructor(options, serverConfig, name, container) {\r\n        // Build configuration parameters for the FirebaseAppImpl base class.\r\n        const automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined\r\n            ? serverConfig.automaticDataCollectionEnabled\r\n            : false;\r\n        // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\r\n        const config = {\r\n            name,\r\n            automaticDataCollectionEnabled\r\n        };\r\n        if (options.apiKey !== undefined) {\r\n            // Construct the parent FirebaseAppImp object.\r\n            super(options, config, container);\r\n        }\r\n        else {\r\n            const appImpl = options;\r\n            super(appImpl.options, config, container);\r\n        }\r\n        // Now construct the data for the FirebaseServerAppImpl.\r\n        this._serverConfig = Object.assign({ automaticDataCollectionEnabled }, serverConfig);\r\n        this._finalizationRegistry = new FinalizationRegistry(() => {\r\n            this.automaticCleanup();\r\n        });\r\n        this._refCount = 0;\r\n        this.incRefCount(this._serverConfig.releaseOnDeref);\r\n        // Do not retain a hard reference to the dref object, otherwise the FinalizationRegisry\r\n        // will never trigger.\r\n        this._serverConfig.releaseOnDeref = undefined;\r\n        serverConfig.releaseOnDeref = undefined;\r\n        registerVersion(name$p, version$1, 'serverapp');\r\n    }\r\n    toJSON() {\r\n        return undefined;\r\n    }\r\n    get refCount() {\r\n        return this._refCount;\r\n    }\r\n    // Increment the reference count of this server app. If an object is provided, register it\r\n    // with the finalization registry.\r\n    incRefCount(obj) {\r\n        if (this.isDeleted) {\r\n            return;\r\n        }\r\n        this._refCount++;\r\n        if (obj !== undefined) {\r\n            this._finalizationRegistry.register(obj, this);\r\n        }\r\n    }\r\n    // Decrement the reference count.\r\n    decRefCount() {\r\n        if (this.isDeleted) {\r\n            return 0;\r\n        }\r\n        return --this._refCount;\r\n    }\r\n    // Invoked by the FinalizationRegistry callback to note that this app should go through its\r\n    // reference counts and delete itself if no reference count remain. The coordinating logic that\r\n    // handles this is in deleteApp(...).\r\n    automaticCleanup() {\r\n        void deleteApp(this);\r\n    }\r\n    get settings() {\r\n        this.checkDestroyed();\r\n        return this._serverConfig;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"server-app-deleted\" /* AppError.SERVER_APP_DELETED */);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(_options, rawConfig = {}) {\r\n    let options = _options;\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    options || (options = getDefaultAppConfig());\r\n    if (!options) {\r\n        throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\nfunction initializeServerApp(_options, _serverAppConfig) {\r\n    if (isBrowser()) {\r\n        // FirebaseServerApp isn't designed to be run in browsers.\r\n        throw ERROR_FACTORY.create(\"invalid-server-app-environment\" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */);\r\n    }\r\n    if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\r\n        _serverAppConfig.automaticDataCollectionEnabled = false;\r\n    }\r\n    let appOptions;\r\n    if (_isFirebaseApp(_options)) {\r\n        appOptions = _options.options;\r\n    }\r\n    else {\r\n        appOptions = _options;\r\n    }\r\n    // Build an app name based on a hash of the configuration options.\r\n    const nameObj = Object.assign(Object.assign({}, _serverAppConfig), appOptions);\r\n    // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\r\n    // construction of FirebaseServerApp instances. For example, if the object is the request headers.\r\n    if (nameObj.releaseOnDeref !== undefined) {\r\n        delete nameObj.releaseOnDeref;\r\n    }\r\n    const hashCode = (s) => {\r\n        return [...s].reduce((hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0, 0);\r\n    };\r\n    if (_serverAppConfig.releaseOnDeref !== undefined) {\r\n        if (typeof FinalizationRegistry === 'undefined') {\r\n            throw ERROR_FACTORY.create(\"finalization-registry-not-supported\" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */, {});\r\n        }\r\n    }\r\n    const nameString = '' + hashCode(JSON.stringify(nameObj));\r\n    const existingApp = _serverApps.get(nameString);\r\n    if (existingApp) {\r\n        existingApp.incRefCount(_serverAppConfig.releaseOnDeref);\r\n        return existingApp;\r\n    }\r\n    const container = new ComponentContainer(nameString);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseServerAppImpl(appOptions, _serverAppConfig, nameString, container);\r\n    _serverApps.set(nameString, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\r\n        return initializeApp();\r\n    }\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    let cleanupProviders = false;\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        cleanupProviders = true;\r\n        _apps.delete(name);\r\n    }\r\n    else if (_serverApps.has(name)) {\r\n        const firebaseServerApp = app;\r\n        if (firebaseServerApp.decRefCount() <= 0) {\r\n            _serverApps.delete(name);\r\n            cleanupProviders = true;\r\n        }\r\n    }\r\n    if (cleanupProviders) {\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* ComponentType.VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        try {\r\n                            db.createObjectStore(STORE_NAME);\r\n                        }\r\n                        catch (e) {\r\n                            // Safari/iOS browsers throw occasional exceptions on\r\n                            // db.createObjectStore() that may be a bug. Avoid blocking\r\n                            // the rest of the app functionality.\r\n                            console.warn(e);\r\n                        }\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME);\r\n        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\r\n        // We already have the value but tx.done can throw,\r\n        // so we need to await it here to catch errors\r\n        await tx.done;\r\n        return result;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        await tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        var _a, _b;\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n            // If we failed to construct a heartbeats cache, then return immediately.\r\n            if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {\r\n                return;\r\n            }\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        var _a;\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {\r\n                return idbHeartbeatObject;\r\n            }\r\n            else {\r\n                return { heartbeats: [] };\r\n            }\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$p, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$p, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _isFirebaseApp, _isFirebaseServerApp, _registerComponent, _removeServiceInstance, _serverApps, deleteApp, getApp, getApps, initializeApp, initializeServerApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"10.12.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, getDefaultEmulatorHostnameAndPort, createMockUserToken, getModularInstance, deepEqual } from '@firebase/util';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass User {\n    constructor(t) {\n        this.uid = t;\n    }\n    isAuthenticated() {\n        return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */    toKey() {\n        return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n    isEqual(t) {\n        return t.uid === this.uid;\n    }\n}\n\n/** A user with a null UID. */ User.UNAUTHENTICATED = new User(null), \n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nUser.GOOGLE_CREDENTIALS = new User(\"google-credentials-uid\"), User.FIRST_PARTY = new User(\"first-party-uid\"), \nUser.MOCK_USER = new User(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet d = \"10.12.1\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst f = new Logger(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */ function setLogLevel(t) {\n    f.setLogLevel(t);\n}\n\nfunction __PRIVATE_logDebug(t, ...e) {\n    if (f.logLevel <= LogLevel.DEBUG) {\n        const r = e.map(__PRIVATE_argToString);\n        f.debug(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\nfunction __PRIVATE_logError(t, ...e) {\n    if (f.logLevel <= LogLevel.ERROR) {\n        const r = e.map(__PRIVATE_argToString);\n        f.error(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\n/**\n * @internal\n */ function __PRIVATE_logWarn(t, ...e) {\n    if (f.logLevel <= LogLevel.WARN) {\n        const r = e.map(__PRIVATE_argToString);\n        f.warn(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */ function __PRIVATE_argToString(t) {\n    if (\"string\" == typeof t) return t;\n    try {\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        /** Formats an object as a JSON string, suitable for logging. */\n        return function __PRIVATE_formatJSON(t) {\n            return JSON.stringify(t);\n        }(t);\n    } catch (e) {\n        // Converting to JSON failed, just log the object directly\n        return t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */ function fail(t = \"Unexpected state\") {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const e = `FIRESTORE (${d}) INTERNAL ASSERTION FAILED: ` + t;\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw __PRIVATE_logError(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */ function __PRIVATE_hardAssert(t, e) {\n    t || fail();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */ function __PRIVATE_debugCast(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const E = \"ok\", m = \"cancelled\", A = \"unknown\", T = \"invalid-argument\", R = \"deadline-exceeded\", P = \"not-found\", I = \"already-exists\", V = \"permission-denied\", p = \"unauthenticated\", y = \"resource-exhausted\", w = \"failed-precondition\", g = \"aborted\", F = \"out-of-range\", v = \"unimplemented\", D = \"internal\", b = \"unavailable\", C = \"data-loss\";\n\n/** An error returned by a Firestore operation. */ class FirestoreError extends FirebaseError {\n    /** @hideconstructor */\n    constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    t, \n    /**\n     * A custom error description.\n     */\n    e) {\n        super(t, e), this.code = t, this.message = e, \n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_Deferred {\n    constructor() {\n        this.promise = new Promise(((t, e) => {\n            this.resolve = t, this.reject = e;\n        }));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_OAuthToken {\n    constructor(t, e) {\n        this.user = e, this.type = \"OAuth\", this.headers = new Map, this.headers.set(\"Authorization\", `Bearer ${t}`);\n    }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */ class __PRIVATE_EmptyAuthCredentialsProvider {\n    getToken() {\n        return Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        // Fire with initial user.\n        t.enqueueRetryable((() => e(User.UNAUTHENTICATED)));\n    }\n    shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */ class __PRIVATE_EmulatorAuthCredentialsProvider {\n    constructor(t) {\n        this.token = t, \n        /**\n         * Stores the listener registered with setChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.changeListener = null;\n    }\n    getToken() {\n        return Promise.resolve(this.token);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        this.changeListener = e, \n        // Fire with initial user.\n        t.enqueueRetryable((() => e(this.token.user)));\n    }\n    shutdown() {\n        this.changeListener = null;\n    }\n}\n\n/** Credential provider for the Lite SDK. */ class __PRIVATE_LiteAuthCredentialsProvider {\n    constructor(t) {\n        this.auth = null, t.onInit((t => {\n            this.auth = t;\n        }));\n    }\n    getToken() {\n        return this.auth ? this.auth.getToken().then((t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.accessToken), \n        new __PRIVATE_OAuthToken(t.accessToken, new User(this.auth.getUid()))) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */ class __PRIVATE_FirstPartyToken {\n    constructor(t, e, r) {\n        this.t = t, this.i = e, this.o = r, this.type = \"FirstParty\", this.user = User.FIRST_PARTY, \n        this.u = new Map;\n    }\n    /**\n     * Gets an authorization token, using a provided factory function, or return\n     * null.\n     */    l() {\n        return this.o ? this.o() : null;\n    }\n    get headers() {\n        this.u.set(\"X-Goog-AuthUser\", this.t);\n        // Use array notation to prevent minification\n        const t = this.l();\n        return t && this.u.set(\"Authorization\", t), this.i && this.u.set(\"X-Goog-Iam-Authorization-Token\", this.i), \n        this.u;\n    }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */ class __PRIVATE_FirstPartyAuthCredentialsProvider {\n    constructor(t, e, r) {\n        this.t = t, this.i = e, this.o = r;\n    }\n    getToken() {\n        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.t, this.i, this.o));\n    }\n    start(t, e) {\n        // Fire with initial uid.\n        t.enqueueRetryable((() => e(User.FIRST_PARTY)));\n    }\n    shutdown() {}\n    invalidateToken() {}\n}\n\nclass AppCheckToken {\n    constructor(t) {\n        this.value = t, this.type = \"AppCheck\", this.headers = new Map, t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n    }\n}\n\n/** AppCheck token provider for the Lite SDK. */ class __PRIVATE_LiteAppCheckTokenProvider {\n    constructor(t) {\n        this.h = t, this.appCheck = null, t.onInit((t => {\n            this.appCheck = t;\n        }));\n    }\n    getToken() {\n        return this.appCheck ? this.appCheck.getToken().then((t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.token), \n        new AppCheckToken(t.token)) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass DatabaseInfo {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId - The database to use.\n     * @param appId - The Firebase App Id.\n     * @param persistenceKey - A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host - The Firestore backend host to connect to.\n     * @param ssl - Whether to use SSL when connecting.\n     * @param forceLongPolling - Whether to use the forceLongPolling option\n     * when using WebChannel as the network transport.\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n     * option when using WebChannel as the network transport.\n     * @param longPollingOptions Options that configure long-polling.\n     * @param useFetchStreams Whether to use the Fetch API instead of\n     * XMLHTTPRequest\n     */\n    constructor(t, e, r, n, i, s, o, a, u) {\n        this.databaseId = t, this.appId = e, this.persistenceKey = r, this.host = n, this.ssl = i, \n        this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = a, \n        this.useFetchStreams = u;\n    }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass DatabaseId {\n    constructor(t, e) {\n        this.projectId = t, this.database = e || \"(default)\";\n    }\n    static empty() {\n        return new DatabaseId(\"\", \"\");\n    }\n    get isDefaultDatabase() {\n        return \"(default)\" === this.database;\n    }\n    isEqual(t) {\n        return t instanceof DatabaseId && t.projectId === this.projectId && t.database === this.database;\n    }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass BasePath {\n    constructor(t, e, r) {\n        void 0 === e ? e = 0 : e > t.length && fail(), void 0 === r ? r = t.length - e : r > t.length - e && fail(), \n        this.segments = t, this.offset = e, this.len = r;\n    }\n    get length() {\n        return this.len;\n    }\n    isEqual(t) {\n        return 0 === BasePath.comparator(this, t);\n    }\n    child(t) {\n        const e = this.segments.slice(this.offset, this.limit());\n        return t instanceof BasePath ? t.forEach((t => {\n            e.push(t);\n        })) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */    limit() {\n        return this.offset + this.length;\n    }\n    popFirst(t) {\n        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n    popLast() {\n        return this.construct(this.segments, this.offset, this.length - 1);\n    }\n    firstSegment() {\n        return this.segments[this.offset];\n    }\n    lastSegment() {\n        return this.get(this.length - 1);\n    }\n    get(t) {\n        return this.segments[this.offset + t];\n    }\n    isEmpty() {\n        return 0 === this.length;\n    }\n    isPrefixOf(t) {\n        if (t.length < this.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    isImmediateParentOf(t) {\n        if (this.length + 1 !== t.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    forEach(t) {\n        for (let e = this.offset, r = this.limit(); e < r; e++) t(this.segments[e]);\n    }\n    toArray() {\n        return this.segments.slice(this.offset, this.limit());\n    }\n    static comparator(t, e) {\n        const r = Math.min(t.length, e.length);\n        for (let n = 0; n < r; n++) {\n            const r = t.get(n), i = e.get(n);\n            if (r < i) return -1;\n            if (r > i) return 1;\n        }\n        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */ class ResourcePath extends BasePath {\n    construct(t, e, r) {\n        return new ResourcePath(t, e, r);\n    }\n    canonicalString() {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join(\"/\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns a string representation of this path\n     * where each path segment has been encoded with\n     * `encodeURIComponent`.\n     */    toUriEncodedString() {\n        return this.toArray().map(encodeURIComponent).join(\"/\");\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */    static fromString(...t) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        const e = [];\n        for (const r of t) {\n            if (r.indexOf(\"//\") >= 0) throw new FirestoreError(T, `Invalid segment (${r}). Paths must not contain // in them.`);\n            // Strip leading and traling slashed.\n                        e.push(...r.split(\"/\").filter((t => t.length > 0)));\n        }\n        return new ResourcePath(e);\n    }\n    static emptyPath() {\n        return new ResourcePath([]);\n    }\n}\n\nconst S = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */ class FieldPath$1 extends BasePath {\n    construct(t, e, r) {\n        return new FieldPath$1(t, e, r);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */    static isValidIdentifier(t) {\n        return S.test(t);\n    }\n    canonicalString() {\n        return this.toArray().map((t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), \n        FieldPath$1.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t))).join(\".\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */    isKeyField() {\n        return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */    static keyField() {\n        return new FieldPath$1([ \"__name__\" ]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */    static fromServerFormat(t) {\n        const e = [];\n        let r = \"\", n = 0;\n        const __PRIVATE_addCurrentSegment = () => {\n            if (0 === r.length) throw new FirestoreError(T, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n            e.push(r), r = \"\";\n        };\n        let i = !1;\n        for (;n < t.length; ) {\n            const e = t[n];\n            if (\"\\\\\" === e) {\n                if (n + 1 === t.length) throw new FirestoreError(T, \"Path has trailing escape character: \" + t);\n                const e = t[n + 1];\n                if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new FirestoreError(T, \"Path has invalid escape sequence: \" + t);\n                r += e, n += 2;\n            } else \"`\" === e ? (i = !i, n++) : \".\" !== e || i ? (r += e, n++) : (__PRIVATE_addCurrentSegment(), \n            n++);\n        }\n        if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(T, \"Unterminated ` in path: \" + t);\n        return new FieldPath$1(e);\n    }\n    static emptyPath() {\n        return new FieldPath$1([]);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */ class DocumentKey {\n    constructor(t) {\n        this.path = t;\n    }\n    static fromPath(t) {\n        return new DocumentKey(ResourcePath.fromString(t));\n    }\n    static fromName(t) {\n        return new DocumentKey(ResourcePath.fromString(t).popFirst(5));\n    }\n    static empty() {\n        return new DocumentKey(ResourcePath.emptyPath());\n    }\n    get collectionGroup() {\n        return this.path.popLast().lastSegment();\n    }\n    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {\n        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {\n        return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {\n        return this.path.popLast();\n    }\n    isEqual(t) {\n        return null !== t && 0 === ResourcePath.comparator(this.path, t.path);\n    }\n    toString() {\n        return this.path.toString();\n    }\n    static comparator(t, e) {\n        return ResourcePath.comparator(t.path, e.path);\n    }\n    static isDocumentKey(t) {\n        return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */    static fromSegments(t) {\n        return new DocumentKey(new ResourcePath(t.slice()));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_validateNonEmptyArgument(t, e, r) {\n    if (!r) throw new FirestoreError(T, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction __PRIVATE_validateDocumentPath(t) {\n    if (!DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */ function __PRIVATE_validateCollectionPath(t) {\n    if (DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction __PRIVATE_valueDescription(t) {\n    if (void 0 === t) return \"undefined\";\n    if (null === t) return \"null\";\n    if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), \n    JSON.stringify(t);\n    if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n    if (\"object\" == typeof t) {\n        if (t instanceof Array) return \"an array\";\n        {\n            const e = \n            /** try to get the constructor name for an object. */\n            function __PRIVATE_tryGetCustomObjectType(t) {\n                if (t.constructor) return t.constructor.name;\n                return null;\n            }\n            /**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */ (t);\n            return e ? `a custom ${e} object` : \"an object\";\n        }\n    }\n    return \"function\" == typeof t ? \"a function\" : fail();\n}\n\nfunction __PRIVATE_cast(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    if (\"_delegate\" in t && (\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    t = t._delegate), !(t instanceof e)) {\n        if (e.name === t.constructor.name) throw new FirestoreError(T, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n        {\n            const r = __PRIVATE_valueDescription(t);\n            throw new FirestoreError(T, `Expected type '${e.name}', but it was: ${r}`);\n        }\n    }\n    return t;\n}\n\nfunction __PRIVATE_validatePositiveNumber(t, e) {\n    if (e <= 0) throw new FirestoreError(T, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\nfunction __PRIVATE_cloneLongPollingOptions(t) {\n    const e = {};\n    return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */ let N = null;\n\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nfunction __PRIVATE_generateUniqueDebugId() {\n    return null === N ? N = function __PRIVATE_generateInitialUniqueDebugId() {\n        return 268435456 + Math.round(2147483648 * Math.random());\n    }() : N++, \"0x\" + N.toString(16);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */ function __PRIVATE_isNullOrUndefined(t) {\n    return null == t;\n}\n\n/** Returns whether the value represents -0. */ function __PRIVATE_isNegativeZero(t) {\n    // Detect if the value is -0.0. Based on polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst O = {\n    BatchGetDocuments: \"batchGet\",\n    Commit: \"commit\",\n    RunQuery: \"runQuery\",\n    RunAggregationQuery: \"runAggregationQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar q, B;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction __PRIVATE_mapCodeFromHttpStatus(t) {\n    if (void 0 === t) return __PRIVATE_logError(\"RPC_ERROR\", \"HTTP error has no status\"), \n    A;\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    \n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n        switch (t) {\n      case 200:\n        // OK\n        return E;\n\n      case 400:\n        // Bad Request\n        return w;\n\n        // Other possibilities based on the forward mapping\n        // return Code.INVALID_ARGUMENT;\n        // return Code.OUT_OF_RANGE;\n              case 401:\n        // Unauthorized\n        return p;\n\n      case 403:\n        // Forbidden\n        return V;\n\n      case 404:\n        // Not Found\n        return P;\n\n      case 409:\n        // Conflict\n        return g;\n\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n              case 416:\n        // Range Not Satisfiable\n        return F;\n\n      case 429:\n        // Too Many Requests\n        return y;\n\n      case 499:\n        // Client Closed Request\n        return m;\n\n      case 500:\n        // Internal Server Error\n        return A;\n\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n              case 501:\n        // Unimplemented\n        return v;\n\n      case 503:\n        // Service Unavailable\n        return b;\n\n      case 504:\n        // Gateway Timeout\n        return R;\n\n      default:\n        return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? w : t >= 500 && t < 600 ? D : A;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */ (B = q || (q = {}))[B.OK = 0] = \"OK\", B[B.CANCELLED = 1] = \"CANCELLED\", B[B.UNKNOWN = 2] = \"UNKNOWN\", \nB[B.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", B[B.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", \nB[B.NOT_FOUND = 5] = \"NOT_FOUND\", B[B.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", B[B.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", \nB[B.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", B[B.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", \nB[B.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", B[B.ABORTED = 10] = \"ABORTED\", \nB[B.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", B[B.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", \nB[B.INTERNAL = 13] = \"INTERNAL\", B[B.UNAVAILABLE = 14] = \"UNAVAILABLE\", B[B.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass __PRIVATE_FetchConnection extends \n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass __PRIVATE_RestConnection {\n    constructor(t) {\n        this.databaseInfo = t, this.databaseId = t.databaseId;\n        const e = t.ssl ? \"https\" : \"http\", r = encodeURIComponent(this.databaseId.projectId), n = encodeURIComponent(this.databaseId.database);\n        this.m = e + \"://\" + t.host, this.A = `projects/${r}/databases/${n}`, this.T = \"(default)\" === this.databaseId.database ? `project_id=${r}` : `project_id=${r}&database_id=${n}`;\n    }\n    get R() {\n        // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n        // where to run the query, and expect the `request` to NOT specify the \"path\".\n        return !1;\n    }\n    P(t, e, r, n, i) {\n        const s = __PRIVATE_generateUniqueDebugId(), o = this.I(t, e.toUriEncodedString());\n        __PRIVATE_logDebug(\"RestConnection\", `Sending RPC '${t}' ${s}:`, o, r);\n        const a = {\n            \"google-cloud-resource-prefix\": this.A,\n            \"x-goog-request-params\": this.T\n        };\n        return this.V(a, n, i), this.p(t, o, a, r).then((e => (__PRIVATE_logDebug(\"RestConnection\", `Received RPC '${t}' ${s}: `, e), \n        e)), (e => {\n            throw __PRIVATE_logWarn(\"RestConnection\", `RPC '${t}' ${s} failed with error: `, e, \"url: \", o, \"request:\", r), \n            e;\n        }));\n    }\n    g(t, e, r, n, i, s) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.P(t, e, r, n, i);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */    V(t, e, r) {\n        t[\"X-Goog-Api-Client\"] = \n        // SDK_VERSION is updated to different value at runtime depending on the entry point,\n        // so we need to get its value when we need it in a function.\n        function __PRIVATE_getGoogApiClientValue() {\n            return \"gl-js/ fire/\" + d;\n        }(), \n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the $httpOverwrite\n        // parameter supported by ESF to avoid triggering preflight requests.\n        t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), \n        e && e.headers.forEach(((e, r) => t[r] = e)), r && r.headers.forEach(((e, r) => t[r] = e));\n    }\n    I(t, e) {\n        const r = O[t];\n        return `${this.m}/v1/${e}:${r}`;\n    }\n    /**\n     * Closes and cleans up any resources associated with the connection. This\n     * implementation is a no-op because there are no resources associated\n     * with the RestConnection that need to be cleaned up.\n     */    terminate() {\n        // No-op\n    }\n} {\n    /**\n     * @param databaseInfo - The connection info.\n     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n     */\n    constructor(t, e) {\n        super(t), this.F = e;\n    }\n    v(t, e) {\n        throw new Error(\"Not supported by FetchConnection\");\n    }\n    async p(t, e, r, n) {\n        var i;\n        const s = JSON.stringify(n);\n        let o;\n        try {\n            o = await this.F(e, {\n                method: \"POST\",\n                headers: r,\n                body: s\n            });\n        } catch (t) {\n            const e = t;\n            throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(e.status), \"Request failed with error: \" + e.statusText);\n        }\n        if (!o.ok) {\n            let t = await o.json();\n            Array.isArray(t) && (t = t[0]);\n            const e = null === (i = null == t ? void 0 : t.error) || void 0 === i ? void 0 : i.message;\n            throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);\n        }\n        return o.json();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass __PRIVATE_AggregateImpl {\n    constructor(t, e, r) {\n        this.alias = t, this.aggregateType = e, this.fieldPath = r;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */ function __PRIVATE_randomBytes(t) {\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const e = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto), r = new Uint8Array(t);\n    if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(r); else \n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) r[e] = Math.floor(256 * Math.random());\n    return r;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A utility class for generating unique alphanumeric IDs of a specified length.\n *\n * @internal\n * Exported internally for testing purposes.\n */ class __PRIVATE_AutoId {\n    static newId() {\n        // Alphanumeric characters\n        const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", e = Math.floor(256 / t.length) * t.length;\n        // The largest byte value that is a multiple of `char.length`.\n                let r = \"\";\n        for (;r.length < 20; ) {\n            const n = __PRIVATE_randomBytes(40);\n            for (let i = 0; i < n.length; ++i) \n            // Only accept values that are [0, maxMultiple), this ensures they can\n            // be evenly mapped to indices of `chars` via a modulo operation.\n            r.length < 20 && n[i] < e && (r += t.charAt(n[i] % t.length));\n        }\n        return r;\n    }\n}\n\nfunction __PRIVATE_primitiveComparator(t, e) {\n    return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */ function __PRIVATE_arrayEquals(t, e, r) {\n    return t.length === e.length && t.every(((t, n) => r(t, e[n])));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_objectSize(t) {\n    let e = 0;\n    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e++;\n    return e;\n}\n\nfunction forEach(t, e) {\n    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e(r, t[r]);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nclass __PRIVATE_Base64DecodeError extends Error {\n    constructor() {\n        super(...arguments), this.name = \"Base64DecodeError\";\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass ByteString {\n    constructor(t) {\n        this.binaryString = t;\n    }\n    static fromBase64String(t) {\n        const e = function __PRIVATE_decodeBase64(t) {\n            try {\n                return atob(t);\n            } catch (t) {\n                // Check that `DOMException` is defined before using it to avoid\n                // \"ReferenceError: Property 'DOMException' doesn't exist\" in react-native.\n                // (https://github.com/firebase/firebase-js-sdk/issues/7115)\n                throw \"undefined\" != typeof DOMException && t instanceof DOMException ? new __PRIVATE_Base64DecodeError(\"Invalid base64 string: \" + t) : t;\n            }\n        }\n        /** Converts a binary string to a Base64 encoded string. */ (t);\n        return new ByteString(e);\n    }\n    static fromUint8Array(t) {\n        // TODO(indexing); Remove the copy of the byte string here as this method\n        // is frequently called during indexing.\n        const e = \n        /**\n * Helper function to convert an Uint8array to a binary string.\n */\n        function __PRIVATE_binaryStringFromUint8Array(t) {\n            let e = \"\";\n            for (let r = 0; r < t.length; ++r) e += String.fromCharCode(t[r]);\n            return e;\n        }\n        /**\n * Helper function to convert a binary string to an Uint8Array.\n */ (t);\n        return new ByteString(e);\n    }\n    [Symbol.iterator]() {\n        let t = 0;\n        return {\n            next: () => t < this.binaryString.length ? {\n                value: this.binaryString.charCodeAt(t++),\n                done: !1\n            } : {\n                value: void 0,\n                done: !0\n            }\n        };\n    }\n    toBase64() {\n        return function __PRIVATE_encodeBase64(t) {\n            return btoa(t);\n        }(this.binaryString);\n    }\n    toUint8Array() {\n        return function __PRIVATE_uint8ArrayFromBinaryString(t) {\n            const e = new Uint8Array(t.length);\n            for (let r = 0; r < t.length; r++) e[r] = t.charCodeAt(r);\n            return e;\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n        (this.binaryString);\n    }\n    approximateByteSize() {\n        return 2 * this.binaryString.length;\n    }\n    compareTo(t) {\n        return __PRIVATE_primitiveComparator(this.binaryString, t.binaryString);\n    }\n    isEqual(t) {\n        return this.binaryString === t.binaryString;\n    }\n}\n\nByteString.EMPTY_BYTE_STRING = new ByteString(\"\");\n\nconst $ = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */ function __PRIVATE_normalizeTimestamp(t) {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (__PRIVATE_hardAssert(!!t), \"string\" == typeof t) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        let e = 0;\n        const r = $.exec(t);\n        if (__PRIVATE_hardAssert(!!r), r[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            let t = r[1];\n            t = (t + \"000000000\").substr(0, 9), e = Number(t);\n        }\n        // Parse the date to get the seconds.\n                const n = new Date(t);\n        return {\n            seconds: Math.floor(n.getTime() / 1e3),\n            nanos: e\n        };\n    }\n    return {\n        seconds: __PRIVATE_normalizeNumber(t.seconds),\n        nanos: __PRIVATE_normalizeNumber(t.nanos)\n    };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */ function __PRIVATE_normalizeNumber(t) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */ function __PRIVATE_normalizeByteString(t) {\n    return \"string\" == typeof t ? ByteString.fromBase64String(t) : ByteString.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass Timestamp {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds - The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    t, \n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    e) {\n        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n        if (e >= 1e9) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n        if (t < -62135596800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n        // This will break in the year 10,000.\n                if (t >= 253402300800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n    }\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @returns a new timestamp representing the current date.\n     */    static now() {\n        return Timestamp.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */    static fromDate(t) {\n        return Timestamp.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */    static fromMillis(t) {\n        const e = Math.floor(t / 1e3), r = Math.floor(1e6 * (t - 1e3 * e));\n        return new Timestamp(e, r);\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */    toDate() {\n        return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */    toMillis() {\n        return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n    _compareTo(t) {\n        return this.seconds === t.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, t.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */    isEqual(t) {\n        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */    toString() {\n        return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {\n        return {\n            seconds: this.seconds,\n            nanoseconds: this.nanoseconds\n        };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where\n        // <seconds> is translated to have a non-negative value and both <seconds>\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n        // Strings with this format then have a lexiographical ordering that matches\n        // the expected ordering. The <seconds> translation is done to avoid having\n        // a leading negative sign (i.e. a leading '-' character) in its string\n        // representation, which would affect its lexiographical ordering.\n        const t = this.seconds - -62135596800;\n        // Note: Up to 12 decimal digits are required to represent all valid\n        // 'seconds' values.\n                return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */ function __PRIVATE_isServerTimestamp(t) {\n    var e, r;\n    return \"server_timestamp\" === (null === (r = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === r ? void 0 : r.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */ function __PRIVATE_getPreviousValue(t) {\n    const e = t.mapValue.fields.__previous_value__;\n    return __PRIVATE_isServerTimestamp(e) ? __PRIVATE_getPreviousValue(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */ function __PRIVATE_getLocalWriteTime(t) {\n    const e = __PRIVATE_normalizeTimestamp(t.mapValue.fields.__local_write_time__.timestampValue);\n    return new Timestamp(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Q = {\n    fields: {\n        __type__: {\n            stringValue: \"__max__\"\n        }\n    }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction __PRIVATE_typeOrder(t) {\n    return \"nullValue\" in t ? 0 /* TypeOrder.NullValue */ : \"booleanValue\" in t ? 1 /* TypeOrder.BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* TypeOrder.NumberValue */ : \"timestampValue\" in t ? 3 /* TypeOrder.TimestampValue */ : \"stringValue\" in t ? 5 /* TypeOrder.StringValue */ : \"bytesValue\" in t ? 6 /* TypeOrder.BlobValue */ : \"referenceValue\" in t ? 7 /* TypeOrder.RefValue */ : \"geoPointValue\" in t ? 8 /* TypeOrder.GeoPointValue */ : \"arrayValue\" in t ? 9 /* TypeOrder.ArrayValue */ : \"mapValue\" in t ? __PRIVATE_isServerTimestamp(t) ? 4 /* TypeOrder.ServerTimestampValue */ : \n    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n    function __PRIVATE_isMaxValue(t) {\n        return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n    }\n    /**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */ (t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 10 /* TypeOrder.ObjectValue */ : fail();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */ function __PRIVATE_valueEquals(t, e) {\n    if (t === e) return !0;\n    const r = __PRIVATE_typeOrder(t);\n    if (r !== __PRIVATE_typeOrder(e)) return !1;\n    switch (r) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return !0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return t.booleanValue === e.booleanValue;\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return __PRIVATE_getLocalWriteTime(t).isEqual(__PRIVATE_getLocalWriteTime(e));\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return function __PRIVATE_timestampEquals(t, e) {\n            if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) \n            // Use string equality for ISO 8601 timestamps\n            return t.timestampValue === e.timestampValue;\n            const r = __PRIVATE_normalizeTimestamp(t.timestampValue), n = __PRIVATE_normalizeTimestamp(e.timestampValue);\n            return r.seconds === n.seconds && r.nanos === n.nanos;\n        }(t, e);\n\n      case 5 /* TypeOrder.StringValue */ :\n        return t.stringValue === e.stringValue;\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function __PRIVATE_blobEquals(t, e) {\n            return __PRIVATE_normalizeByteString(t.bytesValue).isEqual(__PRIVATE_normalizeByteString(e.bytesValue));\n        }(t, e);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return t.referenceValue === e.referenceValue;\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function __PRIVATE_geoPointEquals(t, e) {\n            return __PRIVATE_normalizeNumber(t.geoPointValue.latitude) === __PRIVATE_normalizeNumber(e.geoPointValue.latitude) && __PRIVATE_normalizeNumber(t.geoPointValue.longitude) === __PRIVATE_normalizeNumber(e.geoPointValue.longitude);\n        }(t, e);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function __PRIVATE_numberEquals(t, e) {\n            if (\"integerValue\" in t && \"integerValue\" in e) return __PRIVATE_normalizeNumber(t.integerValue) === __PRIVATE_normalizeNumber(e.integerValue);\n            if (\"doubleValue\" in t && \"doubleValue\" in e) {\n                const r = __PRIVATE_normalizeNumber(t.doubleValue), n = __PRIVATE_normalizeNumber(e.doubleValue);\n                return r === n ? __PRIVATE_isNegativeZero(r) === __PRIVATE_isNegativeZero(n) : isNaN(r) && isNaN(n);\n            }\n            return !1;\n        }(t, e);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return __PRIVATE_arrayEquals(t.arrayValue.values || [], e.arrayValue.values || [], __PRIVATE_valueEquals);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function __PRIVATE_objectEquals(t, e) {\n            const r = t.mapValue.fields || {}, n = e.mapValue.fields || {};\n            if (__PRIVATE_objectSize(r) !== __PRIVATE_objectSize(n)) return !1;\n            for (const t in r) if (r.hasOwnProperty(t) && (void 0 === n[t] || !__PRIVATE_valueEquals(r[t], n[t]))) return !1;\n            return !0;\n        }\n        /** Returns true if the ArrayValue contains the specified element. */ (t, e);\n\n      default:\n        return fail();\n    }\n}\n\nfunction __PRIVATE_arrayValueContains(t, e) {\n    return void 0 !== (t.values || []).find((t => __PRIVATE_valueEquals(t, e)));\n}\n\nfunction __PRIVATE_valueCompare(t, e) {\n    if (t === e) return 0;\n    const r = __PRIVATE_typeOrder(t), n = __PRIVATE_typeOrder(e);\n    if (r !== n) return __PRIVATE_primitiveComparator(r, n);\n    switch (r) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return 0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return __PRIVATE_primitiveComparator(t.booleanValue, e.booleanValue);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function __PRIVATE_compareNumbers(t, e) {\n            const r = __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue), n = __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);\n            return r < n ? -1 : r > n ? 1 : r === n ? 0 : \n            // one or both are NaN.\n            isNaN(r) ? isNaN(n) ? 0 : -1 : 1;\n        }(t, e);\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return __PRIVATE_compareTimestamps(t.timestampValue, e.timestampValue);\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(t), __PRIVATE_getLocalWriteTime(e));\n\n      case 5 /* TypeOrder.StringValue */ :\n        return __PRIVATE_primitiveComparator(t.stringValue, e.stringValue);\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function __PRIVATE_compareBlobs(t, e) {\n            const r = __PRIVATE_normalizeByteString(t), n = __PRIVATE_normalizeByteString(e);\n            return r.compareTo(n);\n        }(t.bytesValue, e.bytesValue);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return function __PRIVATE_compareReferences(t, e) {\n            const r = t.split(\"/\"), n = e.split(\"/\");\n            for (let t = 0; t < r.length && t < n.length; t++) {\n                const e = __PRIVATE_primitiveComparator(r[t], n[t]);\n                if (0 !== e) return e;\n            }\n            return __PRIVATE_primitiveComparator(r.length, n.length);\n        }(t.referenceValue, e.referenceValue);\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function __PRIVATE_compareGeoPoints(t, e) {\n            const r = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(e.latitude));\n            if (0 !== r) return r;\n            return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.longitude), __PRIVATE_normalizeNumber(e.longitude));\n        }(t.geoPointValue, e.geoPointValue);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return function __PRIVATE_compareArrays(t, e) {\n            const r = t.values || [], n = e.values || [];\n            for (let t = 0; t < r.length && t < n.length; ++t) {\n                const e = __PRIVATE_valueCompare(r[t], n[t]);\n                if (e) return e;\n            }\n            return __PRIVATE_primitiveComparator(r.length, n.length);\n        }(t.arrayValue, e.arrayValue);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function __PRIVATE_compareMaps(t, e) {\n            if (t === Q && e === Q) return 0;\n            if (t === Q) return 1;\n            if (e === Q) return -1;\n            const r = t.fields || {}, n = Object.keys(r), i = e.fields || {}, s = Object.keys(i);\n            // Even though MapValues are likely sorted correctly based on their insertion\n            // order (e.g. when received from the backend), local modifications can bring\n            // elements out of order. We need to re-sort the elements to ensure that\n            // canonical IDs are independent of insertion order.\n            n.sort(), s.sort();\n            for (let t = 0; t < n.length && t < s.length; ++t) {\n                const e = __PRIVATE_primitiveComparator(n[t], s[t]);\n                if (0 !== e) return e;\n                const o = __PRIVATE_valueCompare(r[n[t]], i[s[t]]);\n                if (0 !== o) return o;\n            }\n            return __PRIVATE_primitiveComparator(n.length, s.length);\n        }\n        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);\n\n      default:\n        throw fail();\n    }\n}\n\nfunction __PRIVATE_compareTimestamps(t, e) {\n    if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return __PRIVATE_primitiveComparator(t, e);\n    const r = __PRIVATE_normalizeTimestamp(t), n = __PRIVATE_normalizeTimestamp(e), i = __PRIVATE_primitiveComparator(r.seconds, n.seconds);\n    return 0 !== i ? i : __PRIVATE_primitiveComparator(r.nanos, n.nanos);\n}\n\nfunction __PRIVATE_refValue(t, e) {\n    return {\n        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n    };\n}\n\n/** Returns true if `value` is an ArrayValue. */ function isArray(t) {\n    return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */ function __PRIVATE_isNullValue(t) {\n    return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */ function __PRIVATE_isNanValue(t) {\n    return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */ function __PRIVATE_isMapValue(t) {\n    return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */ function __PRIVATE_deepClone(t) {\n    if (t.geoPointValue) return {\n        geoPointValue: Object.assign({}, t.geoPointValue)\n    };\n    if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n        timestampValue: Object.assign({}, t.timestampValue)\n    };\n    if (t.mapValue) {\n        const e = {\n            mapValue: {\n                fields: {}\n            }\n        };\n        return forEach(t.mapValue.fields, ((t, r) => e.mapValue.fields[t] = __PRIVATE_deepClone(r))), \n        e;\n    }\n    if (t.arrayValue) {\n        const e = {\n            arrayValue: {\n                values: []\n            }\n        };\n        for (let r = 0; r < (t.arrayValue.values || []).length; ++r) e.arrayValue.values[r] = __PRIVATE_deepClone(t.arrayValue.values[r]);\n        return e;\n    }\n    return Object.assign({}, t);\n}\n\nclass Bound {\n    constructor(t, e) {\n        this.position = t, this.inclusive = e;\n    }\n}\n\nfunction __PRIVATE_boundEquals(t, e) {\n    if (null === t) return null === e;\n    if (null === e) return !1;\n    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n    for (let r = 0; r < t.position.length; r++) {\n        if (!__PRIVATE_valueEquals(t.position[r], e.position[r])) return !1;\n    }\n    return !0;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class Filter {}\n\nclass FieldFilter extends Filter {\n    constructor(t, e, r) {\n        super(), this.field = t, this.op = e, this.value = r;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e, r) {\n        return t.isKeyField() ? \"in\" /* Operator.IN */ === e || \"not-in\" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, r) : new __PRIVATE_KeyFieldFilter(t, e, r) : \"array-contains\" /* Operator.ARRAY_CONTAINS */ === e ? new __PRIVATE_ArrayContainsFilter(t, r) : \"in\" /* Operator.IN */ === e ? new __PRIVATE_InFilter(t, r) : \"not-in\" /* Operator.NOT_IN */ === e ? new __PRIVATE_NotInFilter(t, r) : \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new __PRIVATE_ArrayContainsAnyFilter(t, r) : new FieldFilter(t, e, r);\n    }\n    static createKeyFieldInFilter(t, e, r) {\n        return \"in\" /* Operator.IN */ === e ? new __PRIVATE_KeyFieldInFilter(t, r) : new __PRIVATE_KeyFieldNotInFilter(t, r);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        // Types do not have to match in NOT_EQUAL filters.\n                return \"!=\" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(__PRIVATE_valueCompare(e, this.value)) : null !== e && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(e) && this.matchesComparison(__PRIVATE_valueCompare(e, this.value));\n        // Only compare types with matching backend order (such as double and int).\n        }\n    matchesComparison(t) {\n        switch (this.op) {\n          case \"<\" /* Operator.LESS_THAN */ :\n            return t < 0;\n\n          case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ :\n            return t <= 0;\n\n          case \"==\" /* Operator.EQUAL */ :\n            return 0 === t;\n\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return 0 !== t;\n\n          case \">\" /* Operator.GREATER_THAN */ :\n            return t > 0;\n\n          case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ :\n            return t >= 0;\n\n          default:\n            return fail();\n        }\n    }\n    isInequality() {\n        return [ \"<\" /* Operator.LESS_THAN */ , \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ , \">\" /* Operator.GREATER_THAN */ , \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ , \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ].indexOf(this.op) >= 0;\n    }\n    getFlattenedFilters() {\n        return [ this ];\n    }\n    getFilters() {\n        return [ this ];\n    }\n}\n\nclass CompositeFilter extends Filter {\n    constructor(t, e) {\n        super(), this.filters = t, this.op = e, this.D = null;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e) {\n        return new CompositeFilter(t, e);\n    }\n    matches(t) {\n        return function __PRIVATE_compositeFilterIsConjunction(t) {\n            return \"and\" /* CompositeOperator.AND */ === t.op;\n        }(this) ? void 0 === this.filters.find((e => !e.matches(t))) : void 0 !== this.filters.find((e => e.matches(t)));\n    }\n    getFlattenedFilters() {\n        return null !== this.D || (this.D = this.filters.reduce(((t, e) => t.concat(e.getFlattenedFilters())), [])), \n        this.D;\n    }\n    // Returns a mutable copy of `this.filters`\n    getFilters() {\n        return Object.assign([], this.filters);\n    }\n}\n\nfunction __PRIVATE_filterEquals(t, e) {\n    return t instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(t, e) {\n        return e instanceof FieldFilter && t.op === e.op && t.field.isEqual(e.field) && __PRIVATE_valueEquals(t.value, e.value);\n    }(t, e) : t instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(t, e) {\n        if (e instanceof CompositeFilter && t.op === e.op && t.filters.length === e.filters.length) {\n            return t.filters.reduce(((t, r, n) => t && __PRIVATE_filterEquals(r, e.filters[n])), !0);\n        }\n        return !1;\n    }\n    /** Filter that matches on key fields (i.e. '__name__'). */ (t, e) : void fail();\n}\n\nclass __PRIVATE_KeyFieldFilter extends FieldFilter {\n    constructor(t, e, r) {\n        super(t, e, r), this.key = DocumentKey.fromName(r.referenceValue);\n    }\n    matches(t) {\n        const e = DocumentKey.comparator(t.key, this.key);\n        return this.matchesComparison(e);\n    }\n}\n\n/** Filter that matches on key fields within an array. */ class __PRIVATE_KeyFieldInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        return this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\n/** Filter that matches on key fields not present within an array. */ class __PRIVATE_KeyFieldNotInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        return !this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\nfunction __PRIVATE_extractDocumentKeysFromArrayValue(t, e) {\n    var r;\n    return ((null === (r = e.arrayValue) || void 0 === r ? void 0 : r.values) || []).map((t => DocumentKey.fromName(t.referenceValue)));\n}\n\n/** A Filter that implements the array-contains operator. */ class __PRIVATE_ArrayContainsFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"array-contains\" /* Operator.ARRAY_CONTAINS */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return isArray(e) && __PRIVATE_arrayValueContains(e.arrayValue, this.value);\n    }\n}\n\n/** A Filter that implements the IN operator. */ class __PRIVATE_InFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return null !== e && __PRIVATE_arrayValueContains(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the not-in operator. */ class __PRIVATE_NotInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        if (__PRIVATE_arrayValueContains(this.value.arrayValue, {\n            nullValue: \"NULL_VALUE\"\n        })) return !1;\n        const e = t.data.field(this.field);\n        return null !== e && !__PRIVATE_arrayValueContains(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the array-contains-any operator. */ class __PRIVATE_ArrayContainsAnyFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return !(!isArray(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => __PRIVATE_arrayValueContains(this.value.arrayValue, t)));\n    }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */ class OrderBy {\n    constructor(t, e = \"asc\" /* Direction.ASCENDING */) {\n        this.field = t, this.dir = e;\n    }\n}\n\nfunction __PRIVATE_orderByEquals(t, e) {\n    return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */ class SnapshotVersion {\n    constructor(t) {\n        this.timestamp = t;\n    }\n    static fromTimestamp(t) {\n        return new SnapshotVersion(t);\n    }\n    static min() {\n        return new SnapshotVersion(new Timestamp(0, 0));\n    }\n    static max() {\n        return new SnapshotVersion(new Timestamp(253402300799, 999999999));\n    }\n    compareTo(t) {\n        return this.timestamp._compareTo(t.timestamp);\n    }\n    isEqual(t) {\n        return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {\n        // Convert to microseconds.\n        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n    toString() {\n        return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n    toTimestamp() {\n        return this.timestamp;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass SortedMap {\n    constructor(t, e) {\n        this.comparator = t, this.root = e || LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    insert(t, e) {\n        return new SortedMap(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    // Returns a copy of the map, with the specified key removed.\n    remove(t) {\n        return new SortedMap(this.comparator, this.root.remove(t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    // Returns the value of the node with the given key, or null.\n    get(t) {\n        let e = this.root;\n        for (;!e.isEmpty(); ) {\n            const r = this.comparator(t, e.key);\n            if (0 === r) return e.value;\n            r < 0 ? e = e.left : r > 0 && (e = e.right);\n        }\n        return null;\n    }\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    indexOf(t) {\n        // Number of nodes that were pruned when descending right\n        let e = 0, r = this.root;\n        for (;!r.isEmpty(); ) {\n            const n = this.comparator(t, r.key);\n            if (0 === n) return e + r.left.size;\n            n < 0 ? r = r.left : (\n            // Count all nodes left of the node plus the node itself\n            e += r.left.size + 1, r = r.right);\n        }\n        // Node not found\n                return -1;\n    }\n    isEmpty() {\n        return this.root.isEmpty();\n    }\n    // Returns the total number of nodes in the map.\n    get size() {\n        return this.root.size;\n    }\n    // Returns the minimum key in the map.\n    minKey() {\n        return this.root.minKey();\n    }\n    // Returns the maximum key in the map.\n    maxKey() {\n        return this.root.maxKey();\n    }\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.root.inorderTraversal(t);\n    }\n    forEach(t) {\n        this.inorderTraversal(((e, r) => (t(e, r), !1)));\n    }\n    toString() {\n        const t = [];\n        return this.inorderTraversal(((e, r) => (t.push(`${e}:${r}`), !1))), `{${t.join(\", \")}}`;\n    }\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.root.reverseTraversal(t);\n    }\n    // Returns an iterator over the SortedMap.\n    getIterator() {\n        return new SortedMapIterator(this.root, null, this.comparator, !1);\n    }\n    getIteratorFrom(t) {\n        return new SortedMapIterator(this.root, t, this.comparator, !1);\n    }\n    getReverseIterator() {\n        return new SortedMapIterator(this.root, null, this.comparator, !0);\n    }\n    getReverseIteratorFrom(t) {\n        return new SortedMapIterator(this.root, t, this.comparator, !0);\n    }\n}\n\n // end SortedMap\n// An iterator over an LLRBNode.\nclass SortedMapIterator {\n    constructor(t, e, r, n) {\n        this.isReverse = n, this.nodeStack = [];\n        let i = 1;\n        for (;!t.isEmpty(); ) if (i = e ? r(t.key, e) : 1, \n        // flip the comparison if we're going in reverse\n        e && n && (i *= -1), i < 0) \n        // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right; else {\n            if (0 === i) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(t);\n                break;\n            }\n            // This node is greater than our start key, add it to the stack and move\n            // to the next one\n            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n        }\n    }\n    getNext() {\n        let t = this.nodeStack.pop();\n        const e = {\n            key: t.key,\n            value: t.value\n        };\n        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), \n        t = t.left;\n        return e;\n    }\n    hasNext() {\n        return this.nodeStack.length > 0;\n    }\n    peek() {\n        if (0 === this.nodeStack.length) return null;\n        const t = this.nodeStack[this.nodeStack.length - 1];\n        return {\n            key: t.key,\n            value: t.value\n        };\n    }\n}\n\n // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass LLRBNode {\n    constructor(t, e, r, n, i) {\n        this.key = t, this.value = e, this.color = null != r ? r : LLRBNode.RED, this.left = null != n ? n : LLRBNode.EMPTY, \n        this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    copy(t, e, r, n, i) {\n        return new LLRBNode(null != t ? t : this.key, null != e ? e : this.value, null != r ? r : this.color, null != n ? n : this.left, null != i ? i : this.right);\n    }\n    isEmpty() {\n        return !1;\n    }\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    }\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    }\n    // Returns the minimum node in the tree.\n    min() {\n        return this.left.isEmpty() ? this : this.left.min();\n    }\n    // Returns the maximum key in the tree.\n    minKey() {\n        return this.min().key;\n    }\n    // Returns the maximum key in the tree.\n    maxKey() {\n        return this.right.isEmpty() ? this.key : this.right.maxKey();\n    }\n    // Returns new tree, with the key/value added.\n    insert(t, e, r) {\n        let n = this;\n        const i = r(t, n.key);\n        return n = i < 0 ? n.copy(null, null, null, n.left.insert(t, e, r), null) : 0 === i ? n.copy(null, e, null, null, null) : n.copy(null, null, null, null, n.right.insert(t, e, r)), \n        n.fixUp();\n    }\n    removeMin() {\n        if (this.left.isEmpty()) return LLRBNode.EMPTY;\n        let t = this;\n        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), \n        t.fixUp();\n    }\n    // Returns new tree, with the specified item removed.\n    remove(t, e) {\n        let r, n = this;\n        if (e(t, n.key) < 0) n.left.isEmpty() || n.left.isRed() || n.left.left.isRed() || (n = n.moveRedLeft()), \n        n = n.copy(null, null, null, n.left.remove(t, e), null); else {\n            if (n.left.isRed() && (n = n.rotateRight()), n.right.isEmpty() || n.right.isRed() || n.right.left.isRed() || (n = n.moveRedRight()), \n            0 === e(t, n.key)) {\n                if (n.right.isEmpty()) return LLRBNode.EMPTY;\n                r = n.right.min(), n = n.copy(r.key, r.value, null, null, n.right.removeMin());\n            }\n            n = n.copy(null, null, null, null, n.right.remove(t, e));\n        }\n        return n.fixUp();\n    }\n    isRed() {\n        return this.color;\n    }\n    // Returns new tree after performing any needed rotations.\n    fixUp() {\n        let t = this;\n        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), \n        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n    moveRedLeft() {\n        let t = this.colorFlip();\n        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), \n        t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n    moveRedRight() {\n        let t = this.colorFlip();\n        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n    rotateLeft() {\n        const t = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, t, null);\n    }\n    rotateRight() {\n        const t = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, t);\n    }\n    colorFlip() {\n        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, t, e);\n    }\n    // For testing.\n    checkMaxDepth() {\n        const t = this.check();\n        return Math.pow(2, t) <= this.size + 1;\n    }\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    check() {\n        if (this.isRed() && this.left.isRed()) throw fail();\n        if (this.right.isRed()) throw fail();\n        const t = this.left.check();\n        if (t !== this.right.check()) throw fail();\n        return t + (this.isRed() ? 0 : 1);\n    }\n}\n\n // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nLLRBNode.EMPTY = null, LLRBNode.RED = !0, LLRBNode.BLACK = !1;\n\n// end LLRBEmptyNode\nLLRBNode.EMPTY = new \n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass LLRBEmptyNode {\n    constructor() {\n        this.size = 0;\n    }\n    get key() {\n        throw fail();\n    }\n    get value() {\n        throw fail();\n    }\n    get color() {\n        throw fail();\n    }\n    get left() {\n        throw fail();\n    }\n    get right() {\n        throw fail();\n    }\n    // Returns a copy of the current node.\n    copy(t, e, r, n, i) {\n        return this;\n    }\n    // Returns a copy of the tree, with the specified key/value added.\n    insert(t, e, r) {\n        return new LLRBNode(t, e);\n    }\n    // Returns a copy of the tree, with the specified key removed.\n    remove(t, e) {\n        return this;\n    }\n    isEmpty() {\n        return !0;\n    }\n    inorderTraversal(t) {\n        return !1;\n    }\n    reverseTraversal(t) {\n        return !1;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    isRed() {\n        return !1;\n    }\n    // For testing.\n    checkMaxDepth() {\n        return !0;\n    }\n    check() {\n        return 0;\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass SortedSet {\n    constructor(t) {\n        this.comparator = t, this.data = new SortedMap(this.comparator);\n    }\n    has(t) {\n        return null !== this.data.get(t);\n    }\n    first() {\n        return this.data.minKey();\n    }\n    last() {\n        return this.data.maxKey();\n    }\n    get size() {\n        return this.data.size;\n    }\n    indexOf(t) {\n        return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */    forEach(t) {\n        this.data.inorderTraversal(((e, r) => (t(e), !1)));\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {\n        const r = this.data.getIteratorFrom(t[0]);\n        for (;r.hasNext(); ) {\n            const n = r.getNext();\n            if (this.comparator(n.key, t[1]) >= 0) return;\n            e(n.key);\n        }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */    forEachWhile(t, e) {\n        let r;\n        for (r = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); r.hasNext(); ) {\n            if (!t(r.getNext().key)) return;\n        }\n    }\n    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {\n        const e = this.data.getIteratorFrom(t);\n        return e.hasNext() ? e.getNext().key : null;\n    }\n    getIterator() {\n        return new SortedSetIterator(this.data.getIterator());\n    }\n    getIteratorFrom(t) {\n        return new SortedSetIterator(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */    add(t) {\n        return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */    delete(t) {\n        return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n    isEmpty() {\n        return this.data.isEmpty();\n    }\n    unionWith(t) {\n        let e = this;\n        // Make sure `result` always refers to the larger one of the two sets.\n                return e.size < t.size && (e = t, t = this), t.forEach((t => {\n            e = e.add(t);\n        })), e;\n    }\n    isEqual(t) {\n        if (!(t instanceof SortedSet)) return !1;\n        if (this.size !== t.size) return !1;\n        const e = this.data.getIterator(), r = t.data.getIterator();\n        for (;e.hasNext(); ) {\n            const t = e.getNext().key, n = r.getNext().key;\n            if (0 !== this.comparator(t, n)) return !1;\n        }\n        return !0;\n    }\n    toArray() {\n        const t = [];\n        return this.forEach((e => {\n            t.push(e);\n        })), t;\n    }\n    toString() {\n        const t = [];\n        return this.forEach((e => t.push(e))), \"SortedSet(\" + t.toString() + \")\";\n    }\n    copy(t) {\n        const e = new SortedSet(this.comparator);\n        return e.data = t, e;\n    }\n}\n\nclass SortedSetIterator {\n    constructor(t) {\n        this.iter = t;\n    }\n    getNext() {\n        return this.iter.getNext().key;\n    }\n    hasNext() {\n        return this.iter.hasNext();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */ class FieldMask {\n    constructor(t) {\n        this.fields = t, \n        // TODO(dimond): validation of FieldMask\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n        t.sort(FieldPath$1.comparator);\n    }\n    static empty() {\n        return new FieldMask([]);\n    }\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */    unionWith(t) {\n        let e = new SortedSet(FieldPath$1.comparator);\n        for (const t of this.fields) e = e.add(t);\n        for (const r of t) e = e.add(r);\n        return new FieldMask(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */    covers(t) {\n        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n        return !1;\n    }\n    isEqual(t) {\n        return __PRIVATE_arrayEquals(this.fields, t.fields, ((t, e) => t.isEqual(e)));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */ class ObjectValue {\n    constructor(t) {\n        this.value = t;\n    }\n    static empty() {\n        return new ObjectValue({\n            mapValue: {}\n        });\n    }\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */    field(t) {\n        if (t.isEmpty()) return this.value;\n        {\n            let e = this.value;\n            for (let r = 0; r < t.length - 1; ++r) if (e = (e.mapValue.fields || {})[t.get(r)], \n            !__PRIVATE_isMapValue(e)) return null;\n            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n        }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */    set(t, e) {\n        this.getFieldsMap(t.popLast())[t.lastSegment()] = __PRIVATE_deepClone(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */    setAll(t) {\n        let e = FieldPath$1.emptyPath(), r = {}, n = [];\n        t.forEach(((t, i) => {\n            if (!e.isImmediateParentOf(i)) {\n                // Insert the accumulated changes at this parent location\n                const t = this.getFieldsMap(e);\n                this.applyChanges(t, r, n), r = {}, n = [], e = i.popLast();\n            }\n            t ? r[i.lastSegment()] = __PRIVATE_deepClone(t) : n.push(i.lastSegment());\n        }));\n        const i = this.getFieldsMap(e);\n        this.applyChanges(i, r, n);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */    delete(t) {\n        const e = this.field(t.popLast());\n        __PRIVATE_isMapValue(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n    isEqual(t) {\n        return __PRIVATE_valueEquals(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */    getFieldsMap(t) {\n        let e = this.value;\n        e.mapValue.fields || (e.mapValue = {\n            fields: {}\n        });\n        for (let r = 0; r < t.length; ++r) {\n            let n = e.mapValue.fields[t.get(r)];\n            __PRIVATE_isMapValue(n) && n.mapValue.fields || (n = {\n                mapValue: {\n                    fields: {}\n                }\n            }, e.mapValue.fields[t.get(r)] = n), e = n;\n        }\n        return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */    applyChanges(t, e, r) {\n        forEach(e, ((e, r) => t[e] = r));\n        for (const e of r) delete t[e];\n    }\n    clone() {\n        return new ObjectValue(__PRIVATE_deepClone(this.value));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */ class MutableDocument {\n    constructor(t, e, r, n, i, s, o) {\n        this.key = t, this.documentType = e, this.version = r, this.readTime = n, this.createTime = i, \n        this.data = s, this.documentState = o;\n    }\n    /**\n     * Creates a document with no known version or data, but which can serve as\n     * base document for mutations.\n     */    static newInvalidDocument(t) {\n        return new MutableDocument(t, 0 /* DocumentType.INVALID */ , \n        /* version */ SnapshotVersion.min(), \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */    static newFoundDocument(t, e, r, n) {\n        return new MutableDocument(t, 1 /* DocumentType.FOUND_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ r, n, 0 /* DocumentState.SYNCED */);\n    }\n    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {\n        return new MutableDocument(t, 2 /* DocumentType.NO_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    static newUnknownDocument(t, e) {\n        return new MutableDocument(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n    }\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */    convertToFoundDocument(t, e) {\n        // If a document is switching state from being an invalid or deleted\n        // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n        // update from Watch or due to applying a local set mutation on top\n        // of a deleted document, our best guess about its createTime would be the\n        // version at which the document transitioned to a FOUND_DOCUMENT.\n        return !this.createTime.isEqual(SnapshotVersion.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), \n        this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */ , this.data = e, \n        this.documentState = 0 /* DocumentState.SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */    convertToNoDocument(t) {\n        return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */ , \n        this.data = ObjectValue.empty(), this.documentState = 0 /* DocumentState.SYNCED */ , \n        this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    convertToUnknownDocument(t) {\n        return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        this.data = ObjectValue.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , \n        this;\n    }\n    setHasCommittedMutations() {\n        return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasLocalMutations() {\n        return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ , this.version = SnapshotVersion.min(), \n        this;\n    }\n    setReadTime(t) {\n        return this.readTime = t, this;\n    }\n    get hasLocalMutations() {\n        return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n    get hasCommittedMutations() {\n        return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n    get hasPendingWrites() {\n        return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n    isValidDocument() {\n        return 0 /* DocumentType.INVALID */ !== this.documentType;\n    }\n    isFoundDocument() {\n        return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;\n    }\n    isNoDocument() {\n        return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;\n    }\n    isUnknownDocument() {\n        return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n    isEqual(t) {\n        return t instanceof MutableDocument && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n    mutableCopy() {\n        return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n    }\n    toString() {\n        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass __PRIVATE_TargetImpl {\n    constructor(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n        this.path = t, this.collectionGroup = e, this.orderBy = r, this.filters = n, this.limit = i, \n        this.startAt = s, this.endAt = o, this.C = null;\n    }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */ function __PRIVATE_newTarget(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n    return new __PRIVATE_TargetImpl(t, e, r, n, i, s, o);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nclass __PRIVATE_QueryImpl {\n    /**\n     * Initializes a Query with a path and optional additional query constraints.\n     * Path must currently be empty if this is a collection group query.\n     */\n    constructor(t, e = null, r = [], n = [], i = null, s = \"F\" /* LimitType.First */ , o = null, a = null) {\n        this.path = t, this.collectionGroup = e, this.explicitOrderBy = r, this.filters = n, \n        this.limit = i, this.limitType = s, this.startAt = o, this.endAt = a, this.S = null, \n        // The corresponding `Target` of this `Query` instance, for use with\n        // non-aggregate queries.\n        this.N = null, \n        // The corresponding `Target` of this `Query` instance, for use with\n        // aggregate queries. Unlike targets for non-aggregate queries,\n        // aggregate query targets do not contain normalized order-bys, they only\n        // contain explicit order-bys.\n        this.O = null, this.startAt, this.endAt;\n    }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction __PRIVATE_isCollectionGroupQuery(t) {\n    return null !== t.collectionGroup;\n}\n\n/**\n * Returns the normalized order-by constraint that is used to execute the Query,\n * which can be different from the order-by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`). The normalized order-by\n * includes implicit order-bys in addition to the explicit user provided\n * order-bys.\n */ function __PRIVATE_queryNormalizedOrderBy(t) {\n    const e = __PRIVATE_debugCast(t);\n    if (null === e.S) {\n        e.S = [];\n        const t = new Set;\n        // Any explicit order by fields should be added as is.\n                for (const r of e.explicitOrderBy) e.S.push(r), t.add(r.field.canonicalString());\n        // The order of the implicit ordering always matches the last explicit order by.\n                const r = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */ , n = \n        // Returns the sorted set of inequality filter fields used in this query.\n        function __PRIVATE_getInequalityFilterFields(t) {\n            let e = new SortedSet(FieldPath$1.comparator);\n            return t.filters.forEach((t => {\n                t.getFlattenedFilters().forEach((t => {\n                    t.isInequality() && (e = e.add(t.field));\n                }));\n            })), e;\n        }\n        /**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */ (e);\n        // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical\n        // order. When there are multiple inequality filters on the same field, the field should be added\n        // only once.\n        // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key\n        // field to be sorted last.\n                n.forEach((n => {\n            t.has(n.canonicalString()) || n.isKeyField() || e.S.push(new OrderBy(n, r));\n        })), \n        // Add the document key field to the last if it is not explicitly ordered.\n        t.has(FieldPath$1.keyField().canonicalString()) || e.S.push(new OrderBy(FieldPath$1.keyField(), r));\n    }\n    return e.S;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation.\n */ function __PRIVATE_queryToTarget(t) {\n    const e = __PRIVATE_debugCast(t);\n    return e.N || (e.N = __PRIVATE__queryToTarget(e, __PRIVATE_queryNormalizedOrderBy(t))), \n    e.N;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation,\n * for use within an aggregate query. Unlike targets for non-aggregate queries,\n * aggregate query targets do not contain normalized order-bys, they only\n * contain explicit order-bys.\n */ function __PRIVATE__queryToTarget(t, e) {\n    if (\"F\" /* LimitType.First */ === t.limitType) return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, t.startAt, t.endAt);\n    {\n        // Flip the orderBy directions since we want the last results\n        e = e.map((t => {\n            const e = \"desc\" /* Direction.DESCENDING */ === t.dir ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n            return new OrderBy(t.field, e);\n        }));\n        // We need to swap the cursors to match the now-flipped query ordering.\n        const r = t.endAt ? new Bound(t.endAt.position, t.endAt.inclusive) : null, n = t.startAt ? new Bound(t.startAt.position, t.startAt.inclusive) : null;\n        // Now return as a LimitType.First query.\n        return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, r, n);\n    }\n}\n\nfunction __PRIVATE_queryWithAddedFilter(t, e) {\n    const r = t.filters.concat([ e ]);\n    return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), r, t.limit, t.limitType, t.startAt, t.endAt);\n}\n\nfunction __PRIVATE_queryEquals(t, e) {\n    return function __PRIVATE_targetEquals(t, e) {\n        if (t.limit !== e.limit) return !1;\n        if (t.orderBy.length !== e.orderBy.length) return !1;\n        for (let r = 0; r < t.orderBy.length; r++) if (!__PRIVATE_orderByEquals(t.orderBy[r], e.orderBy[r])) return !1;\n        if (t.filters.length !== e.filters.length) return !1;\n        for (let r = 0; r < t.filters.length; r++) if (!__PRIVATE_filterEquals(t.filters[r], e.filters[r])) return !1;\n        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!__PRIVATE_boundEquals(t.startAt, e.startAt) && __PRIVATE_boundEquals(t.endAt, e.endAt);\n    }(__PRIVATE_queryToTarget(t), __PRIVATE_queryToTarget(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction toNumber(t, e) {\n    return function isSafeInteger(t) {\n        return \"number\" == typeof t && Number.isInteger(t) && !__PRIVATE_isNegativeZero(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n    }(e) ? \n    /**\n * Returns an IntegerValue for `value`.\n */\n    function __PRIVATE_toInteger(t) {\n        return {\n            integerValue: \"\" + t\n        };\n    }(e) : function __PRIVATE_toDouble(t, e) {\n        if (t.useProto3Json) {\n            if (isNaN(e)) return {\n                doubleValue: \"NaN\"\n            };\n            if (e === 1 / 0) return {\n                doubleValue: \"Infinity\"\n            };\n            if (e === -1 / 0) return {\n                doubleValue: \"-Infinity\"\n            };\n        }\n        return {\n            doubleValue: __PRIVATE_isNegativeZero(e) ? \"-0\" : e\n        };\n    }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */ class TransformOperation {\n    constructor() {\n        // Make sure that the structural type of `TransformOperation` is unique.\n        // See https://github.com/microsoft/TypeScript/issues/5451\n        this._ = void 0;\n    }\n}\n\n/** Transforms a value into a server-generated timestamp. */ class __PRIVATE_ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */ class __PRIVATE_ArrayUnionTransformOperation extends TransformOperation {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/** Transforms an array value via a remove operation. */ class __PRIVATE_ArrayRemoveTransformOperation extends TransformOperation {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */ class __PRIVATE_NumericIncrementTransformOperation extends TransformOperation {\n    constructor(t, e) {\n        super(), this.serializer = t, this.q = e;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */ class FieldTransform {\n    constructor(t, e) {\n        this.field = t, this.transform = e;\n    }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */ class Precondition {\n    constructor(t, e) {\n        this.updateTime = t, this.exists = e;\n    }\n    /** Creates a new empty Precondition. */    static none() {\n        return new Precondition;\n    }\n    /** Creates a new Precondition with an exists flag. */    static exists(t) {\n        return new Precondition(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {\n        return new Precondition(t);\n    }\n    /** Returns whether this Precondition is empty. */    get isNone() {\n        return void 0 === this.updateTime && void 0 === this.exists;\n    }\n    isEqual(t) {\n        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */ class Mutation {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */ class __PRIVATE_SetMutation extends Mutation {\n    constructor(t, e, r, n = []) {\n        super(), this.key = t, this.value = e, this.precondition = r, this.fieldTransforms = n, \n        this.type = 0 /* MutationType.Set */;\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */ class __PRIVATE_PatchMutation extends Mutation {\n    constructor(t, e, r, n, i = []) {\n        super(), this.key = t, this.data = e, this.fieldMask = r, this.precondition = n, \n        this.fieldTransforms = i, this.type = 1 /* MutationType.Patch */;\n    }\n    getFieldMask() {\n        return this.fieldMask;\n    }\n}\n\n/** A mutation that deletes the document at the given key. */ class __PRIVATE_DeleteMutation extends Mutation {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 2 /* MutationType.Delete */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */ class __PRIVATE_VerifyMutation extends Mutation {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 3 /* MutationType.Verify */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const L = (() => {\n    const t = {\n        asc: \"ASCENDING\",\n        desc: \"DESCENDING\"\n    };\n    return t;\n})(), M = (() => {\n    const t = {\n        \"<\": \"LESS_THAN\",\n        \"<=\": \"LESS_THAN_OR_EQUAL\",\n        \">\": \"GREATER_THAN\",\n        \">=\": \"GREATER_THAN_OR_EQUAL\",\n        \"==\": \"EQUAL\",\n        \"!=\": \"NOT_EQUAL\",\n        \"array-contains\": \"ARRAY_CONTAINS\",\n        in: \"IN\",\n        \"not-in\": \"NOT_IN\",\n        \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n})(), x = (() => {\n    const t = {\n        and: \"AND\",\n        or: \"OR\"\n    };\n    return t;\n})();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass JsonProtoSerializer {\n    constructor(t, e) {\n        this.databaseId = t, this.useProto3Json = e;\n    }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction toTimestamp(t, e) {\n    if (t.useProto3Json) {\n        return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n    }\n    return {\n        seconds: \"\" + e.seconds,\n        nanos: e.nanoseconds\n    };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction __PRIVATE_toBytes(t, e) {\n    return t.useProto3Json ? e.toBase64() : e.toUint8Array();\n}\n\nfunction __PRIVATE_toVersion(t, e) {\n    return toTimestamp(t, e.toTimestamp());\n}\n\nfunction __PRIVATE_fromVersion(t) {\n    return __PRIVATE_hardAssert(!!t), SnapshotVersion.fromTimestamp(function fromTimestamp(t) {\n        const e = __PRIVATE_normalizeTimestamp(t);\n        return new Timestamp(e.seconds, e.nanos);\n    }(t));\n}\n\nfunction __PRIVATE_toResourceName(t, e) {\n    return __PRIVATE_toResourcePath(t, e).canonicalString();\n}\n\nfunction __PRIVATE_toResourcePath(t, e) {\n    const r = function __PRIVATE_fullyQualifiedPrefixPath(t) {\n        return new ResourcePath([ \"projects\", t.projectId, \"databases\", t.database ]);\n    }(t).child(\"documents\");\n    return void 0 === e ? r : r.child(e);\n}\n\nfunction __PRIVATE_toName(t, e) {\n    return __PRIVATE_toResourceName(t.databaseId, e.path);\n}\n\nfunction fromName(t, e) {\n    const r = function __PRIVATE_fromResourceName(t) {\n        const e = ResourcePath.fromString(t);\n        return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(e)), e;\n    }(e);\n    if (r.get(1) !== t.databaseId.projectId) throw new FirestoreError(T, \"Tried to deserialize key from different project: \" + r.get(1) + \" vs \" + t.databaseId.projectId);\n    if (r.get(3) !== t.databaseId.database) throw new FirestoreError(T, \"Tried to deserialize key from different database: \" + r.get(3) + \" vs \" + t.databaseId.database);\n    return new DocumentKey(function __PRIVATE_extractLocalPathFromResourceName(t) {\n        return __PRIVATE_hardAssert(t.length > 4 && \"documents\" === t.get(4)), t.popFirst(5);\n    }\n    /** Creates a Document proto from key and fields (but no create/update time) */ (r));\n}\n\nfunction __PRIVATE_toMutationDocument(t, e, r) {\n    return {\n        name: __PRIVATE_toName(t, e),\n        fields: r.value.mapValue.fields\n    };\n}\n\nfunction __PRIVATE_fromBatchGetDocumentsResponse(t, e) {\n    return \"found\" in e ? function __PRIVATE_fromFound(t, e) {\n        __PRIVATE_hardAssert(!!e.found), e.found.name, e.found.updateTime;\n        const r = fromName(t, e.found.name), n = __PRIVATE_fromVersion(e.found.updateTime), i = e.found.createTime ? __PRIVATE_fromVersion(e.found.createTime) : SnapshotVersion.min(), s = new ObjectValue({\n            mapValue: {\n                fields: e.found.fields\n            }\n        });\n        return MutableDocument.newFoundDocument(r, n, i, s);\n    }(t, e) : \"missing\" in e ? function __PRIVATE_fromMissing(t, e) {\n        __PRIVATE_hardAssert(!!e.missing), __PRIVATE_hardAssert(!!e.readTime);\n        const r = fromName(t, e.missing), n = __PRIVATE_fromVersion(e.readTime);\n        return MutableDocument.newNoDocument(r, n);\n    }(t, e) : fail();\n}\n\nfunction toMutation(t, e) {\n    let r;\n    if (e instanceof __PRIVATE_SetMutation) r = {\n        update: __PRIVATE_toMutationDocument(t, e.key, e.value)\n    }; else if (e instanceof __PRIVATE_DeleteMutation) r = {\n        delete: __PRIVATE_toName(t, e.key)\n    }; else if (e instanceof __PRIVATE_PatchMutation) r = {\n        update: __PRIVATE_toMutationDocument(t, e.key, e.data),\n        updateMask: __PRIVATE_toDocumentMask(e.fieldMask)\n    }; else {\n        if (!(e instanceof __PRIVATE_VerifyMutation)) return fail();\n        r = {\n            verify: __PRIVATE_toName(t, e.key)\n        };\n    }\n    return e.fieldTransforms.length > 0 && (r.updateTransforms = e.fieldTransforms.map((t => function __PRIVATE_toFieldTransform(t, e) {\n        const r = e.transform;\n        if (r instanceof __PRIVATE_ServerTimestampTransform) return {\n            fieldPath: e.field.canonicalString(),\n            setToServerValue: \"REQUEST_TIME\"\n        };\n        if (r instanceof __PRIVATE_ArrayUnionTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            appendMissingElements: {\n                values: r.elements\n            }\n        };\n        if (r instanceof __PRIVATE_ArrayRemoveTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            removeAllFromArray: {\n                values: r.elements\n            }\n        };\n        if (r instanceof __PRIVATE_NumericIncrementTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            increment: r.q\n        };\n        throw fail();\n    }(0, t)))), e.precondition.isNone || (r.currentDocument = function __PRIVATE_toPrecondition(t, e) {\n        return void 0 !== e.updateTime ? {\n            updateTime: __PRIVATE_toVersion(t, e.updateTime)\n        } : void 0 !== e.exists ? {\n            exists: e.exists\n        } : fail();\n    }(t, e.precondition)), r;\n}\n\nfunction __PRIVATE_toQueryTarget(t, e) {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const r = {\n        structuredQuery: {}\n    }, n = e.path;\n    let i;\n    null !== e.collectionGroup ? (i = n, r.structuredQuery.from = [ {\n        collectionId: e.collectionGroup,\n        allDescendants: !0\n    } ]) : (i = n.popLast(), r.structuredQuery.from = [ {\n        collectionId: n.lastSegment()\n    } ]), r.parent = function __PRIVATE_toQueryPath(t, e) {\n        return __PRIVATE_toResourceName(t.databaseId, e);\n    }(t, i);\n    const s = function __PRIVATE_toFilters(t) {\n        if (0 === t.length) return;\n        return __PRIVATE_toFilter(CompositeFilter.create(t, \"and\" /* CompositeOperator.AND */));\n    }(e.filters);\n    s && (r.structuredQuery.where = s);\n    const o = function __PRIVATE_toOrder(t) {\n        if (0 === t.length) return;\n        return t.map((t => \n        // visible for testing\n        function __PRIVATE_toPropertyOrder(t) {\n            return {\n                field: __PRIVATE_toFieldPathReference(t.field),\n                direction: __PRIVATE_toDirection(t.dir)\n            };\n        }\n        // visible for testing\n        (t)));\n    }(e.orderBy);\n    o && (r.structuredQuery.orderBy = o);\n    const a = function __PRIVATE_toInt32Proto(t, e) {\n        return t.useProto3Json || __PRIVATE_isNullOrUndefined(e) ? e : {\n            value: e\n        };\n    }(t, e.limit);\n    return null !== a && (r.structuredQuery.limit = a), e.startAt && (r.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(t) {\n        return {\n            before: t.inclusive,\n            values: t.position\n        };\n    }(e.startAt)), e.endAt && (r.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(t) {\n        return {\n            before: !t.inclusive,\n            values: t.position\n        };\n    }\n    // visible for testing\n    (e.endAt)), {\n        B: r,\n        parent: i\n    };\n}\n\nfunction __PRIVATE_toDirection(t) {\n    return L[t];\n}\n\n// visible for testing\nfunction __PRIVATE_toOperatorName(t) {\n    return M[t];\n}\n\nfunction __PRIVATE_toCompositeOperatorName(t) {\n    return x[t];\n}\n\nfunction __PRIVATE_toFieldPathReference(t) {\n    return {\n        fieldPath: t.canonicalString()\n    };\n}\n\nfunction __PRIVATE_toFilter(t) {\n    return t instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(t) {\n        if (\"==\" /* Operator.EQUAL */ === t.op) {\n            if (__PRIVATE_isNanValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NAN\"\n                }\n            };\n            if (__PRIVATE_isNullValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NULL\"\n                }\n            };\n        } else if (\"!=\" /* Operator.NOT_EQUAL */ === t.op) {\n            if (__PRIVATE_isNanValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NOT_NAN\"\n                }\n            };\n            if (__PRIVATE_isNullValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NOT_NULL\"\n                }\n            };\n        }\n        return {\n            fieldFilter: {\n                field: __PRIVATE_toFieldPathReference(t.field),\n                op: __PRIVATE_toOperatorName(t.op),\n                value: t.value\n            }\n        };\n    }(t) : t instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(t) {\n        const e = t.getFilters().map((t => __PRIVATE_toFilter(t)));\n        if (1 === e.length) return e[0];\n        return {\n            compositeFilter: {\n                op: __PRIVATE_toCompositeOperatorName(t.op),\n                filters: e\n            }\n        };\n    }(t) : fail();\n}\n\nfunction __PRIVATE_toDocumentMask(t) {\n    const e = [];\n    return t.fields.forEach((t => e.push(t.canonicalString()))), {\n        fieldPaths: e\n    };\n}\n\nfunction __PRIVATE_isValidResourceName(t) {\n    // Resource names have at least 4 components (project ID, database ID)\n    return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_newSerializer(t) {\n    return new JsonProtoSerializer(t, /* useProto3Json= */ !0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass __PRIVATE_ExponentialBackoff {\n    constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    t, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    e, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    r = 1e3\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */ , n = 1.5\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */ , i = 6e4) {\n        this.$ = t, this.timerId = e, this.L = r, this.M = n, this.k = i, this.U = 0, this.j = null, \n        /** The last backoff attempt, as epoch milliseconds. */\n        this.W = Date.now(), this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */    reset() {\n        this.U = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */    K() {\n        this.U = this.k;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */    G(t) {\n        // Cancel any pending backoff operation.\n        this.cancel();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const e = Math.floor(this.U + this.H()), r = Math.max(0, Date.now() - this.W), n = Math.max(0, e - r);\n        // Guard against lastAttemptTime being in the future due to a clock change.\n                n > 0 && __PRIVATE_logDebug(\"ExponentialBackoff\", `Backing off for ${n} ms (base delay: ${this.U} ms, delay with jitter: ${e} ms, last attempt: ${r} ms ago)`), \n        this.j = this.$.enqueueAfterDelay(this.timerId, n, (() => (this.W = Date.now(), \n        t()))), \n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.U *= this.M, this.U < this.L && (this.U = this.L), this.U > this.k && (this.U = this.k);\n    }\n    J() {\n        null !== this.j && (this.j.skipDelay(), this.j = null);\n    }\n    cancel() {\n        null !== this.j && (this.j.cancel(), this.j = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    H() {\n        return (Math.random() - .5) * this.U;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass __PRIVATE_DatastoreImpl extends class Datastore {} {\n    constructor(t, e, r, n) {\n        super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = r, \n        this.serializer = n, this.Y = !1;\n    }\n    Z() {\n        if (this.Y) throw new FirestoreError(w, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */    P(t, e, r, n) {\n        return this.Z(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([i, s]) => this.connection.P(t, __PRIVATE_toResourcePath(e, r), n, i, s))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n        }));\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    g(t, e, r, n, i) {\n        return this.Z(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, o]) => this.connection.g(t, __PRIVATE_toResourcePath(e, r), n, s, o, i))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n        }));\n    }\n    terminate() {\n        this.Y = !0, this.connection.terminate();\n    }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function __PRIVATE_invokeCommitRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), n = {\n        writes: e.map((t => toMutation(r.serializer, t)))\n    };\n    await r.P(\"Commit\", r.serializer.databaseId, ResourcePath.emptyPath(), n);\n}\n\nasync function __PRIVATE_invokeBatchGetDocumentsRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), n = {\n        documents: e.map((t => __PRIVATE_toName(r.serializer, t)))\n    }, i = await r.g(\"BatchGetDocuments\", r.serializer.databaseId, ResourcePath.emptyPath(), n, e.length), s = new Map;\n    i.forEach((t => {\n        const e = __PRIVATE_fromBatchGetDocumentsResponse(r.serializer, t);\n        s.set(e.key.toString(), e);\n    }));\n    const o = [];\n    return e.forEach((t => {\n        const e = s.get(t.toString());\n        __PRIVATE_hardAssert(!!e), o.push(e);\n    })), o;\n}\n\nasync function __PRIVATE_invokeRunQueryRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), {B: n, parent: i} = __PRIVATE_toQueryTarget(r.serializer, __PRIVATE_queryToTarget(e));\n    return (await r.g(\"RunQuery\", r.serializer.databaseId, i, {\n        structuredQuery: n.structuredQuery\n    })).filter((t => !!t.document)).map((t => function __PRIVATE_fromDocument(t, e, r) {\n        const n = fromName(t, e.name), i = __PRIVATE_fromVersion(e.updateTime), s = e.createTime ? __PRIVATE_fromVersion(e.createTime) : SnapshotVersion.min(), o = new ObjectValue({\n            mapValue: {\n                fields: e.fields\n            }\n        }), a = MutableDocument.newFoundDocument(n, i, s, o);\n        return r && a.setHasCommittedMutations(), r ? a.setHasCommittedMutations() : a;\n    }(r.serializer, t.document, void 0)));\n}\n\nasync function __PRIVATE_invokeRunAggregationQueryRpc(t, e, r) {\n    var n;\n    const i = __PRIVATE_debugCast(t), {request: s, X: o, parent: a} = function __PRIVATE_toRunAggregationQueryRequest(t, e, r, n) {\n        const {B: i, parent: s} = __PRIVATE_toQueryTarget(t, e), o = {}, a = [];\n        let u = 0;\n        return r.forEach((t => {\n            // Map all client-side aliases to a unique short-form\n            // alias. This avoids issues with client-side aliases that\n            // exceed the 1500-byte string size limit.\n            const e = n ? t.alias : \"aggregate_\" + u++;\n            o[e] = t.alias, \"count\" === t.aggregateType ? a.push({\n                alias: e,\n                count: {}\n            }) : \"avg\" === t.aggregateType ? a.push({\n                alias: e,\n                avg: {\n                    field: __PRIVATE_toFieldPathReference(t.fieldPath)\n                }\n            }) : \"sum\" === t.aggregateType && a.push({\n                alias: e,\n                sum: {\n                    field: __PRIVATE_toFieldPathReference(t.fieldPath)\n                }\n            });\n        })), {\n            request: {\n                structuredAggregationQuery: {\n                    aggregations: a,\n                    structuredQuery: i.structuredQuery\n                },\n                parent: i.parent\n            },\n            X: o,\n            parent: s\n        };\n    }(i.serializer, function __PRIVATE_queryToAggregateTarget(t) {\n        const e = __PRIVATE_debugCast(t);\n        return e.O || (\n        // Do not include implicit order-bys for aggregate queries.\n        e.O = __PRIVATE__queryToTarget(e, t.explicitOrderBy)), e.O;\n    }(e), r);\n    i.connection.R || delete s.parent;\n    const u = (await i.g(\"RunAggregationQuery\", i.serializer.databaseId, a, s, \n    /*expectedResponseCount=*/ 1)).filter((t => !!t.result));\n    // Omit RunAggregationQueryResponse that only contain readTimes.\n        __PRIVATE_hardAssert(1 === u.length);\n    // Remap the short-form aliases that were sent to the server\n    // to the client-side aliases. Users will access the results\n    // using the client-side alias.\n    const _ = null === (n = u[0].result) || void 0 === n ? void 0 : n.aggregateFields;\n    return Object.keys(_).reduce(((t, e) => (t[o[e]] = _[e], t)), {});\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const k = new Map;\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction __PRIVATE_getDatastore(t) {\n    if (t._terminated) throw new FirestoreError(w, \"The client has already been terminated.\");\n    if (!k.has(t)) {\n        __PRIVATE_logDebug(\"ComponentProvider\", \"Initializing Datastore\");\n        const e = function __PRIVATE_newConnection(t) {\n            return new __PRIVATE_FetchConnection(t, fetch.bind(null));\n        }(function __PRIVATE_makeDatabaseInfo(t, e, r, n) {\n            return new DatabaseInfo(t, e, r, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(n.experimentalLongPollingOptions), n.useFetchStreams);\n        }\n        /**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t._databaseId, t.app.options.appId || \"\", t._persistenceKey, t._freezeSettings())), r = __PRIVATE_newSerializer(t._databaseId), n = function __PRIVATE_newDatastore(t, e, r, n) {\n            return new __PRIVATE_DatastoreImpl(t, e, r, n);\n        }(t._authCredentials, t._appCheckCredentials, e, r);\n        k.set(t, n);\n    }\n    return k.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettingsImpl {\n    constructor(t) {\n        var e, r;\n        if (void 0 === t.host) {\n            if (void 0 !== t.ssl) throw new FirestoreError(T, \"Can't provide ssl option if host option is not set\");\n            this.host = \"firestore.googleapis.com\", this.ssl = true;\n        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, \n        this.localCache = t.localCache, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {\n            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new FirestoreError(T, \"cacheSizeBytes must be at least 1048576\");\n            this.cacheSizeBytes = t.cacheSizeBytes;\n        }\n        !function __PRIVATE_validateIsNotUsedTogether(t, e, r, n) {\n            if (!0 === e && !0 === n) throw new FirestoreError(T, `${t} and ${r} cannot be used together.`);\n        }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling), \n        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : \n        // For backwards compatibility, coerce the value to boolean even though\n        // the TypeScript compiler has narrowed the type to boolean already.\n        // noinspection PointlessBooleanExpressionJS\n        this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, \n        this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (r = t.experimentalLongPollingOptions) && void 0 !== r ? r : {}), \n        function __PRIVATE_validateLongPollingOptions(t) {\n            if (void 0 !== t.timeoutSeconds) {\n                if (isNaN(t.timeoutSeconds)) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);\n                if (t.timeoutSeconds < 5) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);\n                if (t.timeoutSeconds > 30) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`);\n            }\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        /**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */ (this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;\n    }\n    isEqual(t) {\n        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(t, e) {\n            return t.timeoutSeconds === e.timeoutSeconds;\n        }(this.experimentalLongPollingOptions, t.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n}\n\nclass Firestore {\n    /** @hideconstructor */\n    constructor(t, e, r, n) {\n        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = r, \n        this._app = n, \n        /**\n         * Whether it's a Firestore or Firestore Lite instance.\n         */\n        this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new FirestoreSettingsImpl({}), \n        this._settingsFrozen = !1;\n    }\n    /**\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n     * instance.\n     */    get app() {\n        if (!this._app) throw new FirestoreError(w, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n        return this._app;\n    }\n    get _initialized() {\n        return this._settingsFrozen;\n    }\n    get _terminated() {\n        return void 0 !== this._terminateTask;\n    }\n    _setSettings(t) {\n        if (this._settingsFrozen) throw new FirestoreError(w, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n        this._settings = new FirestoreSettingsImpl(t), void 0 !== t.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(t) {\n            if (!t) return new __PRIVATE_EmptyAuthCredentialsProvider;\n            switch (t.type) {\n              case \"firstParty\":\n                return new __PRIVATE_FirstPartyAuthCredentialsProvider(t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n              case \"provider\":\n                return t.client;\n\n              default:\n                throw new FirestoreError(T, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n            }\n        }(t.credentials));\n    }\n    _getSettings() {\n        return this._settings;\n    }\n    _freezeSettings() {\n        return this._settingsFrozen = !0, this._settings;\n    }\n    _delete() {\n        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {\n        return {\n            app: this._app,\n            databaseId: this._databaseId,\n            settings: this._settings\n        };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */    _terminate() {\n        return function __PRIVATE_removeComponents(t) {\n            const e = k.get(t);\n            e && (__PRIVATE_logDebug(\"ComponentProvider\", \"Removing Datastore\"), k.delete(t), \n            e.terminate());\n        }(this), Promise.resolve();\n    }\n}\n\nfunction initializeFirestore(t, e, r) {\n    r || (r = \"(default)\");\n    const n = _getProvider(t, \"firestore/lite\");\n    if (n.isInitialized(r)) throw new FirestoreError(w, \"Firestore can only be initialized once per app.\");\n    return n.initialize({\n        options: e,\n        instanceIdentifier: r\n    });\n}\n\nfunction getFirestore(e, r) {\n    const n = \"object\" == typeof e ? e : getApp(), i = \"string\" == typeof e ? e : r || \"(default)\", s = _getProvider(n, \"firestore/lite\").getImmediate({\n        identifier: i\n    });\n    if (!s._initialized) {\n        const t = getDefaultEmulatorHostnameAndPort(\"firestore\");\n        t && connectFirestoreEmulator(s, ...t);\n    }\n    return s;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */ function connectFirestoreEmulator(t, e, r, n = {}) {\n    var i;\n    const s = (t = __PRIVATE_cast(t, Firestore))._getSettings(), o = `${e}:${r}`;\n    if (\"firestore.googleapis.com\" !== s.host && s.host !== o && __PRIVATE_logWarn(\"Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.\"), \n    t._setSettings(Object.assign(Object.assign({}, s), {\n        host: o,\n        ssl: !1\n    })), n.mockUserToken) {\n        let e, r;\n        if (\"string\" == typeof n.mockUserToken) e = n.mockUserToken, r = User.MOCK_USER; else {\n            // Let createMockUserToken validate first (catches common mistakes like\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n            e = createMockUserToken(n.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);\n            const s = n.mockUserToken.sub || n.mockUserToken.user_id;\n            if (!s) throw new FirestoreError(T, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n            r = new User(s);\n        }\n        t._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(e, r));\n    }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */ function terminate(t) {\n    return t = __PRIVATE_cast(t, Firestore), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass AggregateField {\n    /**\n     * Create a new AggregateField<T>\n     * @param aggregateType Specifies the type of aggregation operation to perform.\n     * @param _internalFieldPath Optionally specifies the field that is aggregated.\n     * @internal\n     */\n    constructor(t = \"count\", e) {\n        this._internalFieldPath = e, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateField\", this.aggregateType = t;\n    }\n}\n\n/**\n * The results of executing an aggregation query.\n */ class AggregateQuerySnapshot {\n    /** @hideconstructor */\n    constructor(t, e, r) {\n        this._userDataWriter = e, this._data = r, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateQuerySnapshot\", this.query = t;\n    }\n    /**\n     * Returns the results of the aggregations performed over the underlying\n     * query.\n     *\n     * The keys of the returned object will be the same as those of the\n     * `AggregateSpec` object specified to the aggregation method, and the values\n     * will be the corresponding aggregation result.\n     *\n     * @returns The results of the aggregations performed over the underlying\n     * query.\n     */    data() {\n        return this._userDataWriter.convertObjectMap(this._data);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */ class Query {\n    // This is the lite version of the Query class in the main SDK.\n    /** @hideconstructor protected */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, r) {\n        this.converter = e, this._query = r, \n        /** The type of this Firestore reference. */\n        this.type = \"query\", this.firestore = t;\n    }\n    withConverter(t) {\n        return new Query(this.firestore, t, this._query);\n    }\n}\n\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */ class DocumentReference {\n    /** @hideconstructor */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, r) {\n        this.converter = e, this._key = r, \n        /** The type of this Firestore reference. */\n        this.type = \"document\", this.firestore = t;\n    }\n    get _path() {\n        return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */    get path() {\n        return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */    get parent() {\n        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\n    }\n    withConverter(t) {\n        return new DocumentReference(this.firestore, t, this._key);\n    }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */ class CollectionReference extends Query {\n    /** @hideconstructor */\n    constructor(t, e, r) {\n        super(t, e, function __PRIVATE_newQueryForPath(t) {\n            return new __PRIVATE_QueryImpl(t);\n        }(r)), this._path = r, \n        /** The type of this Firestore reference. */\n        this.type = \"collection\";\n    }\n    /** The collection's identifier. */    get id() {\n        return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */    get path() {\n        return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */    get parent() {\n        const t = this._path.popLast();\n        return t.isEmpty() ? null : new DocumentReference(this.firestore, \n        /* converter= */ null, new DocumentKey(t));\n    }\n    withConverter(t) {\n        return new CollectionReference(this.firestore, t, this._path);\n    }\n}\n\nfunction collection(t, e, ...r) {\n    if (t = getModularInstance(t), __PRIVATE_validateNonEmptyArgument(\"collection\", \"path\", e), t instanceof Firestore) {\n        const n = ResourcePath.fromString(e, ...r);\n        return __PRIVATE_validateCollectionPath(n), new CollectionReference(t, /* converter= */ null, n);\n    }\n    {\n        if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const n = t._path.child(ResourcePath.fromString(e, ...r));\n        return __PRIVATE_validateCollectionPath(n), new CollectionReference(t.firestore, \n        /* converter= */ null, n);\n    }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */ function collectionGroup(t, e) {\n    if (t = __PRIVATE_cast(t, Firestore), __PRIVATE_validateNonEmptyArgument(\"collectionGroup\", \"collection id\", e), \n    e.indexOf(\"/\") >= 0) throw new FirestoreError(T, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n    return new Query(t, \n    /* converter= */ null, function __PRIVATE_newQueryForCollectionGroup(t) {\n        return new __PRIVATE_QueryImpl(ResourcePath.emptyPath(), t);\n    }(e));\n}\n\nfunction doc(t, e, ...r) {\n    if (t = getModularInstance(t), \n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    1 === arguments.length && (e = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument(\"doc\", \"path\", e), \n    t instanceof Firestore) {\n        const n = ResourcePath.fromString(e, ...r);\n        return __PRIVATE_validateDocumentPath(n), new DocumentReference(t, \n        /* converter= */ null, new DocumentKey(n));\n    }\n    {\n        if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const n = t._path.child(ResourcePath.fromString(e, ...r));\n        return __PRIVATE_validateDocumentPath(n), new DocumentReference(t.firestore, t instanceof CollectionReference ? t.converter : null, new DocumentKey(n));\n    }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function refEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), (t instanceof DocumentReference || t instanceof CollectionReference) && (e instanceof DocumentReference || e instanceof CollectionReference) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function queryEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), t instanceof Query && e instanceof Query && (t.firestore === e.firestore && __PRIVATE_queryEquals(t._query, e._query) && t.converter === e.converter);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */ class Bytes {\n    /** @hideconstructor */\n    constructor(t) {\n        this._byteString = t;\n    }\n    /**\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64 - The Base64 string used to create the `Bytes` object.\n     */    static fromBase64String(t) {\n        try {\n            return new Bytes(ByteString.fromBase64String(t));\n        } catch (t) {\n            throw new FirestoreError(T, \"Failed to construct data from Base64 string: \" + t);\n        }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */    static fromUint8Array(t) {\n        return new Bytes(ByteString.fromUint8Array(t));\n    }\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */    toBase64() {\n        return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */    toUint8Array() {\n        return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */    toString() {\n        return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */    isEqual(t) {\n        return this._byteString.isEqual(t._byteString);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */ class FieldPath {\n    /**\n     * Creates a `FieldPath` from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames - A list of field names.\n     */\n    constructor(...t) {\n        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new FirestoreError(T, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n        this._internalPath = new FieldPath$1(t);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other - The `FieldPath` to compare against.\n     * @returns true if this `FieldPath` is equal to the provided one.\n     */    isEqual(t) {\n        return this._internalPath.isEqual(t._internalPath);\n    }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */ function documentId() {\n    return new FieldPath(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */ class FieldValue {\n    /**\n     * @param _methodName - The public API endpoint that returns this class.\n     * @hideconstructor\n     */\n    constructor(t) {\n        this._methodName = t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */ class GeoPoint {\n    /**\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\n     * longitude values.\n     * @param latitude - The latitude as number between -90 and 90.\n     * @param longitude - The longitude as number between -180 and 180.\n     */\n    constructor(t, e) {\n        if (!isFinite(t) || t < -90 || t > 90) throw new FirestoreError(T, \"Latitude must be a number between -90 and 90, but was: \" + t);\n        if (!isFinite(e) || e < -180 || e > 180) throw new FirestoreError(T, \"Longitude must be a number between -180 and 180, but was: \" + e);\n        this._lat = t, this._long = e;\n    }\n    /**\n     * The latitude of this `GeoPoint` instance.\n     */    get latitude() {\n        return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */    get longitude() {\n        return this._long;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */    isEqual(t) {\n        return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {\n        return {\n            latitude: this._lat,\n            longitude: this._long\n        };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */    _compareTo(t) {\n        return __PRIVATE_primitiveComparator(this._lat, t._lat) || __PRIVATE_primitiveComparator(this._long, t._long);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const U = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */ class ParsedSetData {\n    constructor(t, e, r) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n    }\n    toMutation(t, e) {\n        return null !== this.fieldMask ? new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms) : new __PRIVATE_SetMutation(t, this.data, e, this.fieldTransforms);\n    }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */ class ParsedUpdateData {\n    constructor(t, \n    // The fieldMask does not include document transforms.\n    e, r) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n    }\n    toMutation(t, e) {\n        return new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n}\n\nfunction __PRIVATE_isWrite(t) {\n    switch (t) {\n      case 0 /* UserDataSource.Set */ :\n // fall through\n              case 2 /* UserDataSource.MergeSet */ :\n // fall through\n              case 1 /* UserDataSource.Update */ :\n        return !0;\n\n      case 3 /* UserDataSource.Argument */ :\n      case 4 /* UserDataSource.ArrayArgument */ :\n        return !1;\n\n      default:\n        throw fail();\n    }\n}\n\n/** A \"context\" object passed around while parsing user data. */ class __PRIVATE_ParseContextImpl {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param settings - The settings for the parser.\n     * @param databaseId - The database ID of the Firestore instance.\n     * @param serializer - The serializer to use to generate the Value proto.\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n     * rather than throw.\n     * @param fieldTransforms - A mutable list of field transforms encountered\n     * while parsing the data.\n     * @param fieldMask - A mutable list of field paths encountered while parsing\n     * the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    constructor(t, e, r, n, i, s) {\n        this.settings = t, this.databaseId = e, this.serializer = r, this.ignoreUndefinedProperties = n, \n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        void 0 === i && this.tt(), this.fieldTransforms = i || [], this.fieldMask = s || [];\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get et() {\n        return this.settings.et;\n    }\n    /** Returns a new context with the specified settings overwritten. */    rt(t) {\n        return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n    nt(t) {\n        var e;\n        const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), n = this.rt({\n            path: r,\n            it: !1\n        });\n        return n.st(t), n;\n    }\n    ot(t) {\n        var e;\n        const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), n = this.rt({\n            path: r,\n            it: !1\n        });\n        return n.tt(), n;\n    }\n    ut(t) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // undefined.\n        return this.rt({\n            path: void 0,\n            it: !0\n        });\n    }\n    _t(t) {\n        return __PRIVATE_createError(t, this.settings.methodName, this.settings.ct || !1, this.path, this.settings.lt);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {\n        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));\n    }\n    tt() {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path) for (let t = 0; t < this.path.length; t++) this.st(this.path.get(t));\n    }\n    st(t) {\n        if (0 === t.length) throw this._t(\"Document fields must not be empty\");\n        if (__PRIVATE_isWrite(this.et) && U.test(t)) throw this._t('Document fields cannot begin and end with \"__\"');\n    }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */ class __PRIVATE_UserDataReader {\n    constructor(t, e, r) {\n        this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = r || __PRIVATE_newSerializer(t);\n    }\n    /** Creates a new top-level parse context. */    ht(t, e, r, n = !1) {\n        return new __PRIVATE_ParseContextImpl({\n            et: t,\n            methodName: e,\n            lt: r,\n            path: FieldPath$1.emptyPath(),\n            it: !1,\n            ct: n\n        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n    }\n}\n\nfunction __PRIVATE_newUserDataReader(t) {\n    const e = t._freezeSettings(), r = __PRIVATE_newSerializer(t._databaseId);\n    return new __PRIVATE_UserDataReader(t._databaseId, !!e.ignoreUndefinedProperties, r);\n}\n\n/** Parse document data from a set() call. */ function __PRIVATE_parseSetData(t, e, r, n, i, s = {}) {\n    const o = t.ht(s.merge || s.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */ , e, r, i);\n    __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", o, n);\n    const a = __PRIVATE_parseObject(n, o);\n    let u, _;\n    if (s.merge) u = new FieldMask(o.fieldMask), _ = o.fieldTransforms; else if (s.mergeFields) {\n        const t = [];\n        for (const n of s.mergeFields) {\n            const i = __PRIVATE_fieldPathFromArgument$1(e, n, r);\n            if (!o.contains(i)) throw new FirestoreError(T, `Field '${i}' is specified in your field mask but missing from your input data.`);\n            __PRIVATE_fieldMaskContains(t, i) || t.push(i);\n        }\n        u = new FieldMask(t), _ = o.fieldTransforms.filter((t => u.covers(t.field)));\n    } else u = null, _ = o.fieldTransforms;\n    return new ParsedSetData(new ObjectValue(a), u, _);\n}\n\nclass __PRIVATE_DeleteFieldValueImpl extends FieldValue {\n    _toFieldTransform(t) {\n        if (2 /* UserDataSource.MergeSet */ !== t.et) throw 1 /* UserDataSource.Update */ === t.et ? t._t(`${this._methodName}() can only appear at the top level of your update data`) : t._t(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        return t.fieldMask.push(t.path), null;\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_DeleteFieldValueImpl;\n    }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */ function __PRIVATE_createSentinelChildContext(t, e, r) {\n    return new __PRIVATE_ParseContextImpl({\n        et: 3 /* UserDataSource.Argument */ ,\n        lt: e.settings.lt,\n        methodName: t._methodName,\n        it: r\n    }, e.databaseId, e.serializer, e.ignoreUndefinedProperties);\n}\n\nclass __PRIVATE_ServerTimestampFieldValueImpl extends FieldValue {\n    _toFieldTransform(t) {\n        return new FieldTransform(t.path, new __PRIVATE_ServerTimestampTransform);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_ServerTimestampFieldValueImpl;\n    }\n}\n\nclass __PRIVATE_ArrayUnionFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.dt = e;\n    }\n    _toFieldTransform(t) {\n        const e = __PRIVATE_createSentinelChildContext(this, t, \n        /*array=*/ !0), r = this.dt.map((t => __PRIVATE_parseData(t, e))), n = new __PRIVATE_ArrayUnionTransformOperation(r);\n        return new FieldTransform(t.path, n);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_ArrayUnionFieldValueImpl && deepEqual(this.dt, t.dt);\n    }\n}\n\nclass __PRIVATE_ArrayRemoveFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.dt = e;\n    }\n    _toFieldTransform(t) {\n        const e = __PRIVATE_createSentinelChildContext(this, t, \n        /*array=*/ !0), r = this.dt.map((t => __PRIVATE_parseData(t, e))), n = new __PRIVATE_ArrayRemoveTransformOperation(r);\n        return new FieldTransform(t.path, n);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_ArrayRemoveFieldValueImpl && deepEqual(this.dt, t.dt);\n    }\n}\n\nclass __PRIVATE_NumericIncrementFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.ft = e;\n    }\n    _toFieldTransform(t) {\n        const e = new __PRIVATE_NumericIncrementTransformOperation(t.serializer, toNumber(t.serializer, this.ft));\n        return new FieldTransform(t.path, e);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_NumericIncrementFieldValueImpl && this.ft === t.ft;\n    }\n}\n\n/** Parse update data from an update() call. */ function __PRIVATE_parseUpdateData(t, e, r, n) {\n    const i = t.ht(1 /* UserDataSource.Update */ , e, r);\n    __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", i, n);\n    const s = [], o = ObjectValue.empty();\n    forEach(n, ((t, n) => {\n        const a = __PRIVATE_fieldPathFromDotSeparatedString(e, t, r);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                n = getModularInstance(n);\n        const u = i.ot(a);\n        if (n instanceof __PRIVATE_DeleteFieldValueImpl) \n        // Add it to the field mask, but don't add anything to updateData.\n        s.push(a); else {\n            const t = __PRIVATE_parseData(n, u);\n            null != t && (s.push(a), o.set(a, t));\n        }\n    }));\n    const a = new FieldMask(s);\n    return new ParsedUpdateData(o, a, i.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */ function __PRIVATE_parseUpdateVarargs(t, e, r, n, i, s) {\n    const o = t.ht(1 /* UserDataSource.Update */ , e, r), a = [ __PRIVATE_fieldPathFromArgument$1(e, n, r) ], u = [ i ];\n    if (s.length % 2 != 0) throw new FirestoreError(T, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n    for (let t = 0; t < s.length; t += 2) a.push(__PRIVATE_fieldPathFromArgument$1(e, s[t])), \n    u.push(s[t + 1]);\n    const _ = [], c = ObjectValue.empty();\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let t = a.length - 1; t >= 0; --t) if (!__PRIVATE_fieldMaskContains(_, a[t])) {\n        const e = a[t];\n        let r = u[t];\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                r = getModularInstance(r);\n        const n = o.ot(e);\n        if (r instanceof __PRIVATE_DeleteFieldValueImpl) \n        // Add it to the field mask, but don't add anything to updateData.\n        _.push(e); else {\n            const t = __PRIVATE_parseData(r, n);\n            null != t && (_.push(e), c.set(e, t));\n        }\n    }\n    const h = new FieldMask(_);\n    return new ParsedUpdateData(c, h, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */ function __PRIVATE_parseQueryValue(t, e, r, n = !1) {\n    return __PRIVATE_parseData(r, t.ht(n ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */ , e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */ function __PRIVATE_parseData(t, e) {\n    if (__PRIVATE_looksLikeJsonObject(\n    // Unwrap the API type from the Compat SDK. This will return the API type\n    // from firestore-exp.\n    t = getModularInstance(t))) return __PRIVATE_validatePlainObject(\"Unsupported field value:\", e, t), \n    __PRIVATE_parseObject(t, e);\n    if (t instanceof FieldValue) \n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\n    return function __PRIVATE_parseSentinelFieldValue(t, e) {\n        // Sentinels are only supported with writes, and not within arrays.\n        if (!__PRIVATE_isWrite(e.et)) throw e._t(`${t._methodName}() can only be used with update() and set()`);\n        if (!e.path) throw e._t(`${t._methodName}() is not currently supported inside arrays`);\n        const r = t._toFieldTransform(e);\n        r && e.fieldTransforms.push(r);\n    }\n    /**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */ (t, e), null;\n    if (void 0 === t && e.ignoreUndefinedProperties) \n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n    if (\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    e.path && e.fieldMask.push(e.path), t instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (e.settings.it && 4 /* UserDataSource.ArrayArgument */ !== e.et) throw e._t(\"Nested arrays are not supported\");\n        return function __PRIVATE_parseArray(t, e) {\n            const r = [];\n            let n = 0;\n            for (const i of t) {\n                let t = __PRIVATE_parseData(i, e.ut(n));\n                null == t && (\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                t = {\n                    nullValue: \"NULL_VALUE\"\n                }), r.push(t), n++;\n            }\n            return {\n                arrayValue: {\n                    values: r\n                }\n            };\n        }(t, e);\n    }\n    return function __PRIVATE_parseScalarValue(t, e) {\n        if (null === (t = getModularInstance(t))) return {\n            nullValue: \"NULL_VALUE\"\n        };\n        if (\"number\" == typeof t) return toNumber(e.serializer, t);\n        if (\"boolean\" == typeof t) return {\n            booleanValue: t\n        };\n        if (\"string\" == typeof t) return {\n            stringValue: t\n        };\n        if (t instanceof Date) {\n            const r = Timestamp.fromDate(t);\n            return {\n                timestampValue: toTimestamp(e.serializer, r)\n            };\n        }\n        if (t instanceof Timestamp) {\n            // Firestore backend truncates precision down to microseconds. To ensure\n            // offline mode works the same with regards to truncation, perform the\n            // truncation immediately without waiting for the backend to do that.\n            const r = new Timestamp(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n            return {\n                timestampValue: toTimestamp(e.serializer, r)\n            };\n        }\n        if (t instanceof GeoPoint) return {\n            geoPointValue: {\n                latitude: t.latitude,\n                longitude: t.longitude\n            }\n        };\n        if (t instanceof Bytes) return {\n            bytesValue: __PRIVATE_toBytes(e.serializer, t._byteString)\n        };\n        if (t instanceof DocumentReference) {\n            const r = e.databaseId, n = t.firestore._databaseId;\n            if (!n.isEqual(r)) throw e._t(`Document reference is for database ${n.projectId}/${n.database} but should be for database ${r.projectId}/${r.database}`);\n            return {\n                referenceValue: __PRIVATE_toResourceName(t.firestore._databaseId || e.databaseId, t._key.path)\n            };\n        }\n        throw e._t(`Unsupported field value: ${__PRIVATE_valueDescription(t)}`);\n    }\n    /**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */ (t, e);\n}\n\nfunction __PRIVATE_parseObject(t, e) {\n    const r = {};\n    return !function isEmpty(t) {\n        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n        return !0;\n    }(t) ? forEach(t, ((t, n) => {\n        const i = __PRIVATE_parseData(n, e.nt(t));\n        null != i && (r[t] = i);\n    })) : \n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n        mapValue: {\n            fields: r\n        }\n    };\n}\n\nfunction __PRIVATE_looksLikeJsonObject(t) {\n    return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof Timestamp || t instanceof GeoPoint || t instanceof Bytes || t instanceof DocumentReference || t instanceof FieldValue);\n}\n\nfunction __PRIVATE_validatePlainObject(t, e, r) {\n    if (!__PRIVATE_looksLikeJsonObject(r) || !function __PRIVATE_isPlainObject(t) {\n        return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n    }(r)) {\n        const n = __PRIVATE_valueDescription(r);\n        throw \"an object\" === n ? e._t(t + \" a custom object\") : e._t(t + \" \" + n);\n    }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */ function __PRIVATE_fieldPathFromArgument$1(t, e, r) {\n    if ((\n    // If required, replace the FieldPath Compat class with with the firestore-exp\n    // FieldPath.\n    e = getModularInstance(e)) instanceof FieldPath) return e._internalPath;\n    if (\"string\" == typeof e) return __PRIVATE_fieldPathFromDotSeparatedString(t, e);\n    throw __PRIVATE_createError(\"Field path arguments must be of type string or \", t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, r);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */ const j = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */ function __PRIVATE_fieldPathFromDotSeparatedString(t, e, r) {\n    if (e.search(j) >= 0) throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, r);\n    try {\n        return new FieldPath(...e.split(\".\"))._internalPath;\n    } catch (n) {\n        throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, \n        /* hasConverter= */ !1, \n        /* path= */ void 0, r);\n    }\n}\n\nfunction __PRIVATE_createError(t, e, r, n, i) {\n    const s = n && !n.isEmpty(), o = void 0 !== i;\n    let a = `Function ${e}() called with invalid data`;\n    r && (a += \" (via `toFirestore()`)\"), a += \". \";\n    let u = \"\";\n    return (s || o) && (u += \" (found\", s && (u += ` in field ${n}`), o && (u += ` in document ${i}`), \n    u += \")\"), new FirestoreError(T, a + t + u);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function __PRIVATE_fieldMaskContains(t, e) {\n    return t.some((t => t.isEqual(e)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */ class DocumentSnapshot {\n    // Note: This class is stripped down version of the DocumentSnapshot in\n    // the legacy SDK. The changes are:\n    // - No support for SnapshotMetadata.\n    // - No support for SnapshotOptions.\n    /** @hideconstructor protected */\n    constructor(t, e, r, n, i) {\n        this._firestore = t, this._userDataWriter = e, this._key = r, this._document = n, \n        this._converter = i;\n    }\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */    get ref() {\n        return new DocumentReference(this._firestore, this._converter, this._key);\n    }\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */    exists() {\n        return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */    data() {\n        if (this._document) {\n            if (this._converter) {\n                // We only want to use the converter and create a new DocumentSnapshot\n                // if a converter has been provided.\n                const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, \n                /* converter= */ null);\n                return this._converter.fromFirestore(t);\n            }\n            return this._userDataWriter.convertValue(this._document.data.value);\n        }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(t) {\n        if (this._document) {\n            const e = this._document.data.field(__PRIVATE_fieldPathFromArgument(\"DocumentSnapshot.get\", t));\n            if (null !== e) return this._userDataWriter.convertValue(e);\n        }\n    }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */ class QueryDocumentSnapshot extends DocumentSnapshot {\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    data() {\n        return super.data();\n    }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */ class QuerySnapshot {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._docs = e, this.query = t;\n    }\n    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {\n        return [ ...this._docs ];\n    }\n    /** The number of documents in the `QuerySnapshot`. */    get size() {\n        return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {\n        return 0 === this.docs.length;\n    }\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */    forEach(t, e) {\n        this._docs.forEach(t, e);\n    }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */ function snapshotEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), t instanceof DocumentSnapshot && e instanceof DocumentSnapshot ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof QuerySnapshot && e instanceof QuerySnapshot && (queryEqual(t.query, e.query) && __PRIVATE_arrayEquals(t.docs, e.docs, snapshotEqual));\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */ function __PRIVATE_fieldPathFromArgument(t, e) {\n    return \"string\" == typeof e ? __PRIVATE_fieldPathFromDotSeparatedString(t, e) : e instanceof FieldPath ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nclass AppliableConstraint {}\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */ class QueryConstraint extends AppliableConstraint {}\n\nfunction query(t, e, ...r) {\n    let n = [];\n    e instanceof AppliableConstraint && n.push(e), n = n.concat(r), function __PRIVATE_validateQueryConstraintArray(t) {\n        const e = t.filter((t => t instanceof QueryCompositeFilterConstraint)).length, r = t.filter((t => t instanceof QueryFieldFilterConstraint)).length;\n        if (e > 1 || e > 0 && r > 0) throw new FirestoreError(T, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */ (n);\n    for (const e of n) t = e._apply(t);\n    return t;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */ class QueryFieldFilterConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(t, e, r) {\n        super(), this._field = t, this._op = e, this._value = r, \n        /** The type of this query constraint */\n        this.type = \"where\";\n    }\n    static _create(t, e, r) {\n        return new QueryFieldFilterConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return __PRIVATE_validateNewFieldFilter(t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e));\n    }\n    _parse(t) {\n        const e = __PRIVATE_newUserDataReader(t.firestore), r = function __PRIVATE_newQueryFilter(t, e, r, n, i, s, o) {\n            let a;\n            if (i.isKeyField()) {\n                if (\"array-contains\" /* Operator.ARRAY_CONTAINS */ === s || \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === s) throw new FirestoreError(T, `Invalid Query. You can't perform '${s}' queries on documentId().`);\n                if (\"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s) {\n                    __PRIVATE_validateDisjunctiveFilterElements(o, s);\n                    const e = [];\n                    for (const r of o) e.push(__PRIVATE_parseDocumentIdValue(n, t, r));\n                    a = {\n                        arrayValue: {\n                            values: e\n                        }\n                    };\n                } else a = __PRIVATE_parseDocumentIdValue(n, t, o);\n            } else \"in\" /* Operator.IN */ !== s && \"not-in\" /* Operator.NOT_IN */ !== s && \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), \n            a = __PRIVATE_parseQueryValue(r, e, o, \n            /* allowArrays= */ \"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s);\n            return FieldFilter.create(i, s, a);\n        }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n        return r;\n    }\n}\n\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */ function where(t, e, r) {\n    const n = e, i = __PRIVATE_fieldPathFromArgument(\"where\", t);\n    return QueryFieldFilterConstraint._create(i, n, r);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */ class QueryCompositeFilterConstraint extends AppliableConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e) {\n        super(), this.type = t, this._queryConstraints = e;\n    }\n    static _create(t, e) {\n        return new QueryCompositeFilterConstraint(t, e);\n    }\n    _parse(t) {\n        const e = this._queryConstraints.map((e => e._parse(t))).filter((t => t.getFilters().length > 0));\n        return 1 === e.length ? e[0] : CompositeFilter.create(e, this._getOperator());\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return 0 === e.getFilters().length ? t : (function __PRIVATE_validateNewFilter(t, e) {\n            let r = t;\n            const n = e.getFlattenedFilters();\n            for (const t of n) __PRIVATE_validateNewFieldFilter(r, t), r = __PRIVATE_queryWithAddedFilter(r, t);\n        }\n        // Checks if any of the provided filter operators are included in the given list of filters and\n        // returns the first one that is, or null if none are.\n        (t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e)));\n    }\n    _getQueryConstraints() {\n        return this._queryConstraints;\n    }\n    _getOperator() {\n        return \"and\" === this.type ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n    }\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function or(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => __PRIVATE_validateQueryFilterConstraint(\"or\", t))), QueryCompositeFilterConstraint._create(\"or\" /* CompositeOperator.OR */ , t);\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function and(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => __PRIVATE_validateQueryFilterConstraint(\"and\", t))), QueryCompositeFilterConstraint._create(\"and\" /* CompositeOperator.AND */ , t);\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */ class QueryOrderByConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(t, e) {\n        super(), this._field = t, this._direction = e, \n        /** The type of this query constraint */\n        this.type = \"orderBy\";\n    }\n    static _create(t, e) {\n        return new QueryOrderByConstraint(t, e);\n    }\n    _apply(t) {\n        const e = function __PRIVATE_newQueryOrderBy(t, e, r) {\n            if (null !== t.startAt) throw new FirestoreError(T, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n            if (null !== t.endAt) throw new FirestoreError(T, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n            return new OrderBy(e, r);\n        }\n        /**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */ (t._query, this._field, this._direction);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithAddedOrderBy(t, e) {\n            // TODO(dimond): validate that orderBy does not list the same key twice.\n            const r = t.explicitOrderBy.concat([ e ]);\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, r, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, e));\n    }\n}\n\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */ function orderBy(t, e = \"asc\") {\n    const r = e, n = __PRIVATE_fieldPathFromArgument(\"orderBy\", t);\n    return QueryOrderByConstraint._create(n, r);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */ class QueryLimitConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._limit = e, this._limitType = r;\n    }\n    static _create(t, e, r) {\n        return new QueryLimitConstraint(t, e, r);\n    }\n    _apply(t) {\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithLimit(t, e, r) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, r, t.startAt, t.endAt);\n        }(t._query, this._limit, this._limitType));\n    }\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function limit(t) {\n    return __PRIVATE_validatePositiveNumber(\"limit\", t), QueryLimitConstraint._create(\"limit\", t, \"F\" /* LimitType.First */);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function limitToLast(t) {\n    return __PRIVATE_validatePositiveNumber(\"limitToLast\", t), QueryLimitConstraint._create(\"limitToLast\", t, \"L\" /* LimitType.Last */);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */ class QueryStartAtConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n    }\n    static _create(t, e, r) {\n        return new QueryStartAtConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithStartAt(t, e) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n        }(t._query, e));\n    }\n}\n\nfunction startAt(...t) {\n    return QueryStartAtConstraint._create(\"startAt\", t, \n    /*inclusive=*/ !0);\n}\n\nfunction startAfter(...t) {\n    return QueryStartAtConstraint._create(\"startAfter\", t, \n    /*inclusive=*/ !1);\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */ class QueryEndAtConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n    }\n    static _create(t, e, r) {\n        return new QueryEndAtConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithEndAt(t, e) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n        }(t._query, e));\n    }\n}\n\nfunction endBefore(...t) {\n    return QueryEndAtConstraint._create(\"endBefore\", t, \n    /*inclusive=*/ !1);\n}\n\nfunction endAt(...t) {\n    return QueryEndAtConstraint._create(\"endAt\", t, \n    /*inclusive=*/ !0);\n}\n\n/** Helper function to create a bound from a document or fields */ function __PRIVATE_newQueryBoundFromDocOrFields(t, e, r, n) {\n    if (r[0] = getModularInstance(r[0]), r[0] instanceof DocumentSnapshot) return function __PRIVATE_newQueryBoundFromDocument(t, e, r, n, i) {\n        if (!n) throw new FirestoreError(P, `Can't use a DocumentSnapshot that doesn't exist for ${r}().`);\n        const s = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n                for (const r of __PRIVATE_queryNormalizedOrderBy(t)) if (r.field.isKeyField()) s.push(__PRIVATE_refValue(e, n.key)); else {\n            const t = n.data.field(r.field);\n            if (__PRIVATE_isServerTimestamp(t)) throw new FirestoreError(T, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + r.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n            if (null === t) {\n                const t = r.field.canonicalString();\n                throw new FirestoreError(T, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n            }\n            s.push(t);\n        }\n        return new Bound(s, i);\n    }\n    /**\n * Converts a list of field values to a `Bound` for the given query.\n */ (t._query, t.firestore._databaseId, e, r[0]._document, n);\n    {\n        const i = __PRIVATE_newUserDataReader(t.firestore);\n        return function __PRIVATE_newQueryBoundFromFields(t, e, r, n, i, s) {\n            // Use explicit order by's because it has to match the query the user made\n            const o = t.explicitOrderBy;\n            if (i.length > o.length) throw new FirestoreError(T, `Too many arguments provided to ${n}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n            const a = [];\n            for (let s = 0; s < i.length; s++) {\n                const u = i[s];\n                if (o[s].field.isKeyField()) {\n                    if (\"string\" != typeof u) throw new FirestoreError(T, `Invalid query. Expected a string for document ID in ${n}(), but got a ${typeof u}`);\n                    if (!__PRIVATE_isCollectionGroupQuery(t) && -1 !== u.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${n}() must be a plain document ID, but '${u}' contains a slash.`);\n                    const r = t.path.child(ResourcePath.fromString(u));\n                    if (!DocumentKey.isDocumentKey(r)) throw new FirestoreError(T, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${n}() must result in a valid document path, but '${r}' is not because it contains an odd number of segments.`);\n                    const i = new DocumentKey(r);\n                    a.push(__PRIVATE_refValue(e, i));\n                } else {\n                    const t = __PRIVATE_parseQueryValue(r, n, u);\n                    a.push(t);\n                }\n            }\n            return new Bound(a, s);\n        }\n        /**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */ (t._query, t.firestore._databaseId, i, e, r, n);\n    }\n}\n\nfunction __PRIVATE_parseDocumentIdValue(t, e, r) {\n    if (\"string\" == typeof (r = getModularInstance(r))) {\n        if (\"\" === r) throw new FirestoreError(T, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n        if (!__PRIVATE_isCollectionGroupQuery(e) && -1 !== r.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${r}' contains a '/' character.`);\n        const n = e.path.child(ResourcePath.fromString(r));\n        if (!DocumentKey.isDocumentKey(n)) throw new FirestoreError(T, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${n}' is not because it has an odd number of segments (${n.length}).`);\n        return __PRIVATE_refValue(t, new DocumentKey(n));\n    }\n    if (r instanceof DocumentReference) return __PRIVATE_refValue(t, r._key);\n    throw new FirestoreError(T, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(r)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */ function __PRIVATE_validateDisjunctiveFilterElements(t, e) {\n    if (!Array.isArray(t) || 0 === t.length) throw new FirestoreError(T, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */ function __PRIVATE_validateNewFieldFilter(t, e) {\n    const r = function __PRIVATE_findOpInsideFilters(t, e) {\n        for (const r of t) for (const t of r.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;\n        return null;\n    }(t.filters, function __PRIVATE_conflictingOps(t) {\n        switch (t) {\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return [ \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ :\n          case \"in\" /* Operator.IN */ :\n            return [ \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"not-in\" /* Operator.NOT_IN */ :\n            return [ \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , \"in\" /* Operator.IN */ , \"not-in\" /* Operator.NOT_IN */ , \"!=\" /* Operator.NOT_EQUAL */ ];\n\n          default:\n            return [];\n        }\n    }(e.op));\n    if (null !== r) \n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw r === e.op ? new FirestoreError(T, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new FirestoreError(T, `Invalid query. You cannot use '${e.op.toString()}' filters with '${r.toString()}' filters.`);\n}\n\nfunction __PRIVATE_validateQueryFilterConstraint(t, e) {\n    if (!(e instanceof QueryFieldFilterConstraint || e instanceof QueryCompositeFilterConstraint)) throw new FirestoreError(T, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction __PRIVATE_applyFirestoreDataConverter(t, e, r) {\n    let n;\n    // Cast to `any` in order to satisfy the union type constraint on\n    // toFirestore().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return n = t ? r && (r.merge || r.mergeFields) ? t.toFirestore(e, r) : t.toFirestore(e) : e, \n    n;\n}\n\nclass __PRIVATE_LiteUserDataWriter extends class AbstractUserDataWriter {\n    convertValue(t, e = \"none\") {\n        switch (__PRIVATE_typeOrder(t)) {\n          case 0 /* TypeOrder.NullValue */ :\n            return null;\n\n          case 1 /* TypeOrder.BooleanValue */ :\n            return t.booleanValue;\n\n          case 2 /* TypeOrder.NumberValue */ :\n            return __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue);\n\n          case 3 /* TypeOrder.TimestampValue */ :\n            return this.convertTimestamp(t.timestampValue);\n\n          case 4 /* TypeOrder.ServerTimestampValue */ :\n            return this.convertServerTimestamp(t, e);\n\n          case 5 /* TypeOrder.StringValue */ :\n            return t.stringValue;\n\n          case 6 /* TypeOrder.BlobValue */ :\n            return this.convertBytes(__PRIVATE_normalizeByteString(t.bytesValue));\n\n          case 7 /* TypeOrder.RefValue */ :\n            return this.convertReference(t.referenceValue);\n\n          case 8 /* TypeOrder.GeoPointValue */ :\n            return this.convertGeoPoint(t.geoPointValue);\n\n          case 9 /* TypeOrder.ArrayValue */ :\n            return this.convertArray(t.arrayValue, e);\n\n          case 10 /* TypeOrder.ObjectValue */ :\n            return this.convertObject(t.mapValue, e);\n\n          default:\n            throw fail();\n        }\n    }\n    convertObject(t, e) {\n        return this.convertObjectMap(t.fields, e);\n    }\n    /**\n     * @internal\n     */    convertObjectMap(t, e = \"none\") {\n        const r = {};\n        return forEach(t, ((t, n) => {\n            r[t] = this.convertValue(n, e);\n        })), r;\n    }\n    convertGeoPoint(t) {\n        return new GeoPoint(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(t.longitude));\n    }\n    convertArray(t, e) {\n        return (t.values || []).map((t => this.convertValue(t, e)));\n    }\n    convertServerTimestamp(t, e) {\n        switch (e) {\n          case \"previous\":\n            const r = __PRIVATE_getPreviousValue(t);\n            return null == r ? null : this.convertValue(r, e);\n\n          case \"estimate\":\n            return this.convertTimestamp(__PRIVATE_getLocalWriteTime(t));\n\n          default:\n            return null;\n        }\n    }\n    convertTimestamp(t) {\n        const e = __PRIVATE_normalizeTimestamp(t);\n        return new Timestamp(e.seconds, e.nanos);\n    }\n    convertDocumentKey(t, e) {\n        const r = ResourcePath.fromString(t);\n        __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(r));\n        const n = new DatabaseId(r.get(1), r.get(3)), i = new DocumentKey(r.popFirst(5));\n        return n.isEqual(e) || \n        // TODO(b/64130202): Somehow support foreign references.\n        __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${n.projectId}/${n.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), \n        i;\n    }\n} {\n    constructor(t) {\n        super(), this.firestore = t;\n    }\n    convertBytes(t) {\n        return new Bytes(t);\n    }\n    convertReference(t) {\n        const e = this.convertDocumentKey(t, this.firestore._databaseId);\n        return new DocumentReference(this.firestore, /* converter= */ null, e);\n    }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */ function getDoc(t) {\n    const e = __PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n    return __PRIVATE_invokeBatchGetDocumentsRpc(e, [ t._key ]).then((e => {\n        __PRIVATE_hardAssert(1 === e.length);\n        const n = e[0];\n        return new DocumentSnapshot(t.firestore, r, t._key, n.isFoundDocument() ? n : null, t.converter);\n    }));\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */ function getDocs(t) {\n    (function __PRIVATE_validateHasExplicitOrderByForLimitToLast(t) {\n        if (\"L\" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new FirestoreError(v, \"limitToLast() queries require specifying at least one orderBy() clause\");\n    })((t = __PRIVATE_cast(t, Query))._query);\n    const e = __PRIVATE_getDatastore(t.firestore), r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n    return __PRIVATE_invokeRunQueryRpc(e, t._query).then((e => {\n        const n = e.map((e => new QueryDocumentSnapshot(t.firestore, r, e.key, e, t.converter)));\n        return \"L\" /* LimitType.Last */ === t._query.limitType && \n        // Limit to last queries reverse the orderBy constraint that was\n        // specified by the user. As such, we need to reverse the order of the\n        // results to return the documents in the expected order.\n        n.reverse(), new QuerySnapshot(t, n);\n    }));\n}\n\nfunction setDoc(t, e, r) {\n    const n = __PRIVATE_applyFirestoreDataConverter((t = __PRIVATE_cast(t, DocumentReference)).converter, e, r), i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"setDoc\", t._key, n, null !== t.converter, r);\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ i.toMutation(t._key, Precondition.none()) ]);\n}\n\nfunction updateDoc(t, e, r, ...n) {\n    const i = __PRIVATE_newUserDataReader((t = __PRIVATE_cast(t, DocumentReference)).firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n        let s;\n    s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(i, \"updateDoc\", t._key, e, r, n) : __PRIVATE_parseUpdateData(i, \"updateDoc\", t._key, e);\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ s.toMutation(t._key, Precondition.exists(!0)) ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */ function deleteDoc(t) {\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), [ new __PRIVATE_DeleteMutation(t._key, Precondition.none()) ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */ function addDoc(t, e) {\n    const r = doc(t = __PRIVATE_cast(t, CollectionReference)), n = __PRIVATE_applyFirestoreDataConverter(t.converter, e), i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"addDoc\", r._key, n, null !== r.converter, {});\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ i.toMutation(r._key, Precondition.exists(!1)) ]).then((() => r));\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can\n * count the documents in cases where the result set is prohibitively large to\n * download entirely (thousands of documents).\n *\n * @param query The query whose result set size is calculated.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */ function getCount(t) {\n    return getAggregate(t, {\n        count: count()\n    });\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, are downloaded. This\n * function can perform aggregations of the documents in cases where the result\n * set is prohibitively large to download entirely (thousands of documents).\n *\n * @param query The query whose result set is aggregated over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n */ function getAggregate(t, e) {\n    const r = __PRIVATE_cast(t.firestore, Firestore), n = __PRIVATE_getDatastore(r), i = function __PRIVATE_mapToArray(t, e) {\n        const r = [];\n        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && r.push(e(t[n], n, t));\n        return r;\n    }(e, ((t, e) => new __PRIVATE_AggregateImpl(e, t.aggregateType, t._internalFieldPath)));\n    // Run the aggregation and convert the results\n    return __PRIVATE_invokeRunAggregationQueryRpc(n, t._query, i).then((e => function __PRIVATE_convertToAggregateQuerySnapshot(t, e, r) {\n        const n = new __PRIVATE_LiteUserDataWriter(t);\n        return new AggregateQuerySnapshot(e, n, r);\n    }\n    /**\n * Create an AggregateField object that can be used to compute the sum of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to sum across the result set.\n */ (r, t, e)));\n}\n\nfunction sum(t) {\n    return new AggregateField(\"sum\", __PRIVATE_fieldPathFromArgument$1(\"sum\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n */ function average(t) {\n    return new AggregateField(\"avg\", __PRIVATE_fieldPathFromArgument$1(\"average\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n */ function count() {\n    return new AggregateField(\"count\");\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n */ function aggregateFieldEqual(t, e) {\n    var r, n;\n    return t instanceof AggregateField && e instanceof AggregateField && t.aggregateType === e.aggregateType && (null === (r = t._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString()) === (null === (n = e._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString());\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */ function aggregateQuerySnapshotEqual(t, e) {\n    return queryEqual(t.query, e.query) && deepEqual(t.data(), e.data());\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */ function deleteField() {\n    return new __PRIVATE_DeleteFieldValueImpl(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */ function serverTimestamp() {\n    return new __PRIVATE_ServerTimestampFieldValueImpl(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */ function arrayUnion(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new __PRIVATE_ArrayUnionFieldValueImpl(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function arrayRemove(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new __PRIVATE_ArrayRemoveFieldValueImpl(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function increment(t) {\n    return new __PRIVATE_NumericIncrementFieldValueImpl(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */ class WriteBatch {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, \n        this._dataReader = __PRIVATE_newUserDataReader(t);\n    }\n    set(t, e, r) {\n        this._verifyNotCommitted();\n        const n = __PRIVATE_validateReference(t, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r), s = __PRIVATE_parseSetData(this._dataReader, \"WriteBatch.set\", n._key, i, null !== n.converter, r);\n        return this._mutations.push(s.toMutation(n._key, Precondition.none())), this;\n    }\n    update(t, e, r, ...n) {\n        this._verifyNotCommitted();\n        const i = __PRIVATE_validateReference(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let s;\n        return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"WriteBatch.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"WriteBatch.update\", i._key, e), \n        this._mutations.push(s.toMutation(i._key, Precondition.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */    delete(t) {\n        this._verifyNotCommitted();\n        const e = __PRIVATE_validateReference(t, this._firestore);\n        return this._mutations = this._mutations.concat(new __PRIVATE_DeleteMutation(e._key, Precondition.none())), \n        this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */    commit() {\n        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n    _verifyNotCommitted() {\n        if (this._committed) throw new FirestoreError(w, \"A write batch can no longer be used after commit() has been called.\");\n    }\n}\n\nfunction __PRIVATE_validateReference(t, e) {\n    if ((t = getModularInstance(t)).firestore !== e) throw new FirestoreError(T, \"Provided document reference is from a different Firestore instance.\");\n    return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */ function writeBatch(t) {\n    const e = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore));\n    return new WriteBatch(t, (t => __PRIVATE_invokeCommitRpc(e, t)));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */ class Transaction$1 {\n    constructor(t) {\n        this.datastore = t, \n        // The version of each document that was read during this transaction.\n        this.readVersions = new Map, this.mutations = [], this.committed = !1, \n        /**\n         * A deferred usage error that occurred previously in this transaction that\n         * will cause the transaction to fail once it actually commits.\n         */\n        this.lastTransactionError = null, \n        /**\n         * Set of documents that have been written in the transaction.\n         *\n         * When there's more than one write to the same key in a transaction, any\n         * writes after the first are handled differently.\n         */\n        this.writtenDocs = new Set;\n    }\n    async lookup(t) {\n        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw this.lastTransactionError = new FirestoreError(T, \"Firestore transactions require all reads to be executed before all writes.\"), \n        this.lastTransactionError;\n        const e = await __PRIVATE_invokeBatchGetDocumentsRpc(this.datastore, t);\n        return e.forEach((t => this.recordVersion(t))), e;\n    }\n    set(t, e) {\n        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    update(t, e) {\n        try {\n            this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n        } catch (t) {\n            this.lastTransactionError = t;\n        }\n        this.writtenDocs.add(t.toString());\n    }\n    delete(t) {\n        this.write(new __PRIVATE_DeleteMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    async commit() {\n        if (this.ensureCommitNotCalled(), this.lastTransactionError) throw this.lastTransactionError;\n        const t = this.readVersions;\n        // For each mutation, note that the doc was written.\n                this.mutations.forEach((e => {\n            t.delete(e.key.toString());\n        })), \n        // For each document that was read but not written to, we want to perform\n        // a `verify` operation.\n        t.forEach(((t, e) => {\n            const r = DocumentKey.fromPath(e);\n            this.mutations.push(new __PRIVATE_VerifyMutation(r, this.precondition(r)));\n        })), await __PRIVATE_invokeCommitRpc(this.datastore, this.mutations), this.committed = !0;\n    }\n    recordVersion(t) {\n        let e;\n        if (t.isFoundDocument()) e = t.version; else {\n            if (!t.isNoDocument()) throw fail();\n            // Represent a deleted doc using SnapshotVersion.min().\n            e = SnapshotVersion.min();\n        }\n        const r = this.readVersions.get(t.key.toString());\n        if (r) {\n            if (!e.isEqual(r)) \n            // This transaction will fail no matter what.\n            throw new FirestoreError(g, \"Document version changed between two reads.\");\n        } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */    precondition(t) {\n        const e = this.readVersions.get(t.toString());\n        return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(SnapshotVersion.min()) ? Precondition.exists(!1) : Precondition.updateTime(e) : Precondition.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */    preconditionForUpdate(t) {\n        const e = this.readVersions.get(t.toString());\n        // The first time a document is written, we want to take into account the\n        // read time and existence\n                if (!this.writtenDocs.has(t.toString()) && e) {\n            if (e.isEqual(SnapshotVersion.min())) \n            // The document doesn't exist, so fail the transaction.\n            // This has to be validated locally because you can't send a\n            // precondition that a document does not exist without changing the\n            // semantics of the backend write to be an insert. This is the reverse\n            // of what we want, since we want to assert that the document doesn't\n            // exist but then send the update and have it fail. Since we can't\n            // express that to the backend, we have to validate locally.\n            // Note: this can change once we can send separate verify writes in the\n            // transaction.\n            throw new FirestoreError(T, \"Can't update a document that doesn't exist.\");\n            // Document exists, base precondition on document update time.\n                        return Precondition.updateTime(e);\n        }\n        // Document was not read, so we just use the preconditions for a blind\n        // update.\n        return Precondition.exists(!0);\n    }\n    write(t) {\n        this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n    ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const z = {\n    maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass __PRIVATE_TransactionRunner {\n    constructor(t, e, r, n, i) {\n        this.asyncQueue = t, this.datastore = e, this.options = r, this.updateFunction = n, \n        this.deferred = i, this.Et = r.maxAttempts, this.At = new __PRIVATE_ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n    }\n    /** Runs the transaction and sets the result on deferred. */    Tt() {\n        this.Et -= 1, this.Rt();\n    }\n    Rt() {\n        this.At.G((async () => {\n            const t = new Transaction$1(this.datastore), e = this.Pt(t);\n            e && e.then((e => {\n                this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {\n                    this.deferred.resolve(e);\n                })).catch((t => {\n                    this.It(t);\n                }))));\n            })).catch((t => {\n                this.It(t);\n            }));\n        }));\n    }\n    Pt(t) {\n        try {\n            const e = this.updateFunction(t);\n            return !__PRIVATE_isNullOrUndefined(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), \n            null);\n        } catch (t) {\n            // Do not retry errors thrown by user provided updateFunction.\n            return this.deferred.reject(t), null;\n        }\n    }\n    It(t) {\n        this.Et > 0 && this.Vt(t) ? (this.Et -= 1, this.asyncQueue.enqueueAndForget((() => (this.Rt(), \n        Promise.resolve())))) : this.deferred.reject(t);\n    }\n    Vt(t) {\n        if (\"FirebaseError\" === t.name) {\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n            // non-matching document versions with ABORTED. These errors should be retried.\n            const e = t.code;\n            return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n            /**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\n            function __PRIVATE_isPermanentError(t) {\n                switch (t) {\n                  default:\n                    return fail();\n\n                  case m:\n                  case A:\n                  case R:\n                  case y:\n                  case D:\n                  case b:\n // Unauthenticated means something went wrong with our token and we need\n                    // to retry with new credentials which will happen automatically.\n                                      case p:\n                    return !1;\n\n                  case T:\n                  case P:\n                  case I:\n                  case V:\n                  case w:\n // Aborted might be retried in some scenarios, but that is dependant on\n                    // the context and should handled individually by the calling code.\n                    // See https://cloud.google.com/apis/design/errors.\n                                      case g:\n                  case F:\n                  case v:\n                  case C:\n                    return !0;\n                }\n            }(e);\n        }\n        return !1;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */ function getDocument() {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */ class DelayedOperation {\n    constructor(t, e, r, n, i) {\n        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = r, this.op = n, this.removalCallback = i, \n        this.deferred = new __PRIVATE_Deferred, this.then = this.deferred.promise.then.bind(this.deferred.promise), \n        // It's normal for the deferred promise to be canceled (due to cancellation)\n        // and so we attach a dummy catch callback to avoid\n        // 'UnhandledPromiseRejectionWarning' log spam.\n        this.deferred.promise.catch((t => {}));\n    }\n    get promise() {\n        return this.deferred.promise;\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue - The queue to schedule the operation on.\n     * @param id - A Timer ID identifying the type of operation this is.\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\n     * @param op - The operation to run.\n     * @param removalCallback - A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */    static createAndSchedule(t, e, r, n, i) {\n        const s = Date.now() + r, o = new DelayedOperation(t, e, s, n, i);\n        return o.start(r), o;\n    }\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */    start(t) {\n        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */    skipDelay() {\n        return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */    cancel(t) {\n        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(m, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n    handleDelayElapsed() {\n        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), \n        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));\n    }\n    clearTimeout() {\n        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), \n        this.timerHandle = null);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_AsyncQueueImpl {\n    constructor() {\n        // The last promise in the queue.\n        this.yt = Promise.resolve(), \n        // A list of retryable operations. Retryable operations are run in order and\n        // retried with backoff.\n        this.wt = [], \n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\n        // be changed again.\n        this.gt = !1, \n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.Ft = [], \n        // visible for testing\n        this.vt = null, \n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.Dt = !1, \n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n        this.bt = !1, \n        // List of TimerIds to fast-forward delays for.\n        this.Ct = [], \n        // Backoff timer used to schedule retries for retryable operations\n        this.At = new __PRIVATE_ExponentialBackoff(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */), \n        // Visibility handler that triggers an immediate retry of all retryable\n        // operations. Meant to speed up recovery when we regain file system access\n        // after page comes into foreground.\n        this.St = () => {\n            const t = getDocument();\n            t && __PRIVATE_logDebug(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), \n            this.At.J();\n        };\n        const t = getDocument();\n        t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.St);\n    }\n    get isShuttingDown() {\n        return this.gt;\n    }\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */    enqueueAndForget(t) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.enqueue(t);\n    }\n    enqueueAndForgetEvenWhileRestricted(t) {\n        this.Nt(), \n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.Ot(t);\n    }\n    enterRestrictedMode(t) {\n        if (!this.gt) {\n            this.gt = !0, this.bt = t || !1;\n            const e = getDocument();\n            e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.St);\n        }\n    }\n    enqueue(t) {\n        if (this.Nt(), this.gt) \n        // Return a Promise which never resolves.\n        return new Promise((() => {}));\n        // Create a deferred Promise that we can return to the callee. This\n        // allows us to return a \"hanging Promise\" only to the callee and still\n        // advance the queue even when the operation is not run.\n                const e = new __PRIVATE_Deferred;\n        return this.Ot((() => this.gt && this.bt ? Promise.resolve() : (t().then(e.resolve, e.reject), \n        e.promise))).then((() => e.promise));\n    }\n    enqueueRetryable(t) {\n        this.enqueueAndForget((() => (this.wt.push(t), this.qt())));\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */    async qt() {\n        if (0 !== this.wt.length) {\n            try {\n                await this.wt[0](), this.wt.shift(), this.At.reset();\n            } catch (t) {\n                if (!\n                /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function __PRIVATE_isIndexedDbTransactionError(t) {\n                    // Use name equality, as instanceof checks on errors don't work with errors\n                    // that wrap other errors.\n                    return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t)) throw t;\n // Failure will be handled by AsyncQueue\n                                __PRIVATE_logDebug(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n            }\n            this.wt.length > 0 && \n            // If there are additional operations, we re-schedule `retryNextOp()`.\n            // This is necessary to run retryable operations that failed during\n            // their initial attempt since we don't know whether they are already\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n            // call scheduled here.\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\n            // new backoff on every call, there is only ever a single additional\n            // operation in the queue.\n            this.At.G((() => this.qt()));\n        }\n    }\n    Ot(t) {\n        const e = this.yt.then((() => (this.Dt = !0, t().catch((t => {\n            this.vt = t, this.Dt = !1;\n            const e = \n            /**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\n            function __PRIVATE_getMessageOrStack(t) {\n                let e = t.message || \"\";\n                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n                return e;\n            }\n            /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n            // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n            // legacy SDK.\n            /**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */ (t);\n            // Re-throw the error so that this.tail becomes a rejected Promise and\n            // all further attempts to chain (via .then) will just short-circuit\n            // and return the rejected Promise.\n            throw __PRIVATE_logError(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        })).then((t => (this.Dt = !1, t))))));\n        return this.yt = e, e;\n    }\n    enqueueAfterDelay(t, e, r) {\n        this.Nt(), \n        // Fast-forward delays for timerIds that have been overriden.\n        this.Ct.indexOf(t) > -1 && (e = 0);\n        const n = DelayedOperation.createAndSchedule(this, t, e, r, (t => this.Bt(t)));\n        return this.Ft.push(n), n;\n    }\n    Nt() {\n        this.vt && fail();\n    }\n    verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */    async $t() {\n        // Operations in the queue prior to draining may have enqueued additional\n        // operations. Keep draining the queue until the tail is no longer advanced,\n        // which indicates that no more new operations were enqueued and that all\n        // operations were executed.\n        let t;\n        do {\n            t = this.yt, await t;\n        } while (t !== this.yt);\n    }\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */    Qt(t) {\n        for (const e of this.Ft) if (e.timerId === t) return !0;\n        return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */    Lt(t) {\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.$t().then((() => {\n            // Run ops in the same order they'd run if they ran naturally.\n            this.Ft.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));\n            for (const e of this.Ft) if (e.skipDelay(), \"all\" /* TimerId.All */ !== t && e.timerId === t) break;\n            return this.$t();\n        }));\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */    Mt(t) {\n        this.Ct.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */    Bt(t) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        const e = this.Ft.indexOf(t);\n        this.Ft.splice(e, 1);\n    }\n}\n\nclass Transaction {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._transaction = e, this._dataReader = __PRIVATE_newUserDataReader(t);\n    }\n    /**\n     * Reads the document referenced by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be read.\n     * @returns A `DocumentSnapshot` with the read data.\n     */    get(t) {\n        const e = __PRIVATE_validateReference(t, this._firestore), r = new __PRIVATE_LiteUserDataWriter(this._firestore);\n        return this._transaction.lookup([ e._key ]).then((t => {\n            if (!t || 1 !== t.length) return fail();\n            const n = t[0];\n            if (n.isFoundDocument()) return new DocumentSnapshot(this._firestore, r, n.key, n, e.converter);\n            if (n.isNoDocument()) return new DocumentSnapshot(this._firestore, r, e._key, null, e.converter);\n            throw fail();\n        }));\n    }\n    set(t, e, r) {\n        const n = __PRIVATE_validateReference(t, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r), s = __PRIVATE_parseSetData(this._dataReader, \"Transaction.set\", n._key, i, null !== n.converter, r);\n        return this._transaction.set(n._key, s), this;\n    }\n    update(t, e, r, ...n) {\n        const i = __PRIVATE_validateReference(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let s;\n        return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"Transaction.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"Transaction.update\", i._key, e), \n        this._transaction.update(i._key, s), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */    delete(t) {\n        const e = __PRIVATE_validateReference(t, this._firestore);\n        return this._transaction.delete(e._key), this;\n    }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */ function runTransaction(t, e, r) {\n    const n = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore)), i = Object.assign(Object.assign({}, z), r);\n    !function __PRIVATE_validateTransactionOptions(t) {\n        if (t.maxAttempts < 1) throw new FirestoreError(T, \"Max attempts must be at least 1\");\n    }(i);\n    const s = new __PRIVATE_Deferred;\n    return new __PRIVATE_TransactionRunner(function __PRIVATE_newAsyncQueue() {\n        return new __PRIVATE_AsyncQueueImpl;\n    }(), n, i, (r => e(new Transaction(t, r))), s).Tt(), s.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */ !function __PRIVATE_registerFirestore() {\n    !function __PRIVATE_setSDKVersion(t) {\n        d = t;\n    }(`${SDK_VERSION}_lite`), _registerComponent(new Component(\"firestore/lite\", ((t, {instanceIdentifier: e, options: r}) => {\n        const n = t.getProvider(\"app\").getImmediate(), i = new Firestore(new __PRIVATE_LiteAuthCredentialsProvider(t.getProvider(\"auth-internal\")), new __PRIVATE_LiteAppCheckTokenProvider(t.getProvider(\"app-check-internal\")), function __PRIVATE_databaseIdFromApp(t, e) {\n            if (!Object.prototype.hasOwnProperty.apply(t.options, [ \"projectId\" ])) throw new FirestoreError(T, '\"projectId\" not provided in firebase.initializeApp.');\n            return new DatabaseId(t.options.projectId, e);\n        }\n        /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (n, e), n);\n        return r && i._setSettings(r), i;\n    }), \"PUBLIC\").setMultipleInstances(!0)), \n    // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\n    registerVersion(\"firestore-lite\", \"4.6.3\", \"\"), registerVersion(\"firestore-lite\", \"4.6.3\", \"esm2017\");\n}();\n\nexport { AggregateField, AggregateQuerySnapshot, Bytes, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, Timestamp, Transaction, WriteBatch, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, collection, collectionGroup, connectFirestoreEmulator, count, deleteDoc, deleteField, doc, documentId, endAt, endBefore, getAggregate, getCount, getDoc, getDocs, getFirestore, increment, initializeFirestore, limit, limitToLast, or, orderBy, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, where, writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map\n"],"names":["stringToByteArray$1","str","out","p","i","c","byteArrayToString","bytes","pos","c1","c2","c3","c4","u","base64","input","webSafe","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","charToByteMap","byte4","DecodeBase64StringError","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","base64Decode","getGlobal","getDefaultsFromGlobal","getDefaultsFromEnvVariable","defaultsJsonString","getDefaultsFromCookie","match","decoded","getDefaults","e","getDefaultEmulatorHost","productName","_a","_b","getDefaultEmulatorHostnameAndPort","host","separatorIndex","port","getDefaultAppConfig","Deferred","resolve","reject","callback","error","value","createMockUserToken","token","projectId","header","project","iat","sub","payload","signature","isIndexedDBAvailable","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","ERROR_NAME","FirebaseError","code","message","customData","ErrorFactory","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","key","deepEqual","a","b","aKeys","bKeys","k","aProp","bProp","isObject","thing","getModularInstance","Component","name","instanceFactory","type","mode","multipleInstances","props","DEFAULT_ENTRY_NAME","Provider","container","identifier","normalizedIdentifier","deferred","instance","options","optional","component","isComponentEager","instanceIdentifier","instanceDeferred","services","opts","normalizedDeferredIdentifier","existingCallbacks","existingInstance","callbacks","normalizeIdentifierForFactory","ComponentContainer","provider","LogLevel","levelStringToEnum","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","now","method","Logger","val","instanceOfAny","object","constructors","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","getCursorAdvanceMethods","cursorRequestMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","promise","unlisten","success","wrap","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","target","prop","receiver","replaceTraps","wrapFunction","func","storeNames","unwrap","transformCachableValue","newValue","openDB","version","blocked","upgrade","blocking","terminated","openPromise","event","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","oldTraps","PlatformLoggerServiceImpl","isVersionServiceProvider","logString","name$p","version$1","logger","name$o","name$n","name$m","name$l","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","PLATFORM_LOG_STRING","_apps","_serverApps","_components","_addComponent","app","_registerComponent","componentName","serverApp","_getProvider","heartbeatController","ERRORS","ERROR_FACTORY","FirebaseAppImpl","config","SDK_VERSION","initializeApp","_options","rawConfig","existingApp","newApp","getApp","registerVersion","libraryKeyOrName","variant","library","libraryMismatch","versionMismatch","warning","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","oldVersion","readHeartbeatsFromIndexedDB","result","computeKey","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","HeartbeatStorageImpl","agent","date","getUTCDateString","singleDateHeartbeat","hbTimestamp","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","heartbeatsCache","maxSize","heartbeatEntry","hb","countBytes","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents","User","t","d","f","__PRIVATE_logDebug","r","__PRIVATE_argToString","__PRIVATE_logError","__PRIVATE_logWarn","fail","__PRIVATE_hardAssert","__PRIVATE_debugCast","E","m","A","T","R","P","V","y","w","g","F","v","D","FirestoreError","__PRIVATE_OAuthToken","__PRIVATE_EmptyAuthCredentialsProvider","__PRIVATE_EmulatorAuthCredentialsProvider","__PRIVATE_LiteAuthCredentialsProvider","__PRIVATE_FirstPartyToken","__PRIVATE_FirstPartyAuthCredentialsProvider","AppCheckToken","__PRIVATE_LiteAppCheckTokenProvider","DatabaseInfo","n","s","o","DatabaseId","BasePath","ResourcePath","S","FieldPath$1","__PRIVATE_addCurrentSegment","DocumentKey","__PRIVATE_validateNonEmptyArgument","__PRIVATE_validateCollectionPath","__PRIVATE_valueDescription","__PRIVATE_cast","__PRIVATE_cloneLongPollingOptions","N","__PRIVATE_generateUniqueDebugId","__PRIVATE_isNullOrUndefined","__PRIVATE_isNegativeZero","O","q","B","__PRIVATE_mapCodeFromHttpStatus","__PRIVATE_FetchConnection","__PRIVATE_primitiveComparator","__PRIVATE_arrayEquals","__PRIVATE_objectSize","forEach","__PRIVATE_Base64DecodeError","ByteString","$","__PRIVATE_normalizeTimestamp","__PRIVATE_normalizeNumber","__PRIVATE_normalizeByteString","Timestamp","__PRIVATE_isServerTimestamp","__PRIVATE_getPreviousValue","__PRIVATE_getLocalWriteTime","Q","__PRIVATE_typeOrder","__PRIVATE_valueEquals","__PRIVATE_arrayValueContains","__PRIVATE_valueCompare","__PRIVATE_compareTimestamps","isArray","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_isMapValue","__PRIVATE_deepClone","Bound","Filter","FieldFilter","__PRIVATE_KeyFieldFilter","__PRIVATE_ArrayContainsFilter","__PRIVATE_InFilter","__PRIVATE_NotInFilter","__PRIVATE_ArrayContainsAnyFilter","__PRIVATE_KeyFieldInFilter","__PRIVATE_KeyFieldNotInFilter","CompositeFilter","__PRIVATE_extractDocumentKeysFromArrayValue","OrderBy","SnapshotVersion","SortedMap","LLRBNode","SortedMapIterator","SortedSet","SortedSetIterator","ObjectValue","MutableDocument","__PRIVATE_TargetImpl","__PRIVATE_newTarget","__PRIVATE_QueryImpl","__PRIVATE_queryNormalizedOrderBy","__PRIVATE_queryToTarget","__PRIVATE__queryToTarget","L","M","x","JsonProtoSerializer","__PRIVATE_fromVersion","__PRIVATE_toResourceName","__PRIVATE_toResourcePath","fromName","__PRIVATE_isValidResourceName","__PRIVATE_toQueryTarget","__PRIVATE_toFilter","__PRIVATE_toFieldPathReference","__PRIVATE_toDirection","__PRIVATE_toOperatorName","__PRIVATE_toCompositeOperatorName","__PRIVATE_newSerializer","__PRIVATE_DatastoreImpl","__PRIVATE_invokeRunQueryRpc","__PRIVATE_getDatastore","FirestoreSettingsImpl","Firestore","getFirestore","connectFirestoreEmulator","Query","DocumentReference","CollectionReference","collection","Bytes","FieldPath","GeoPoint","j","__PRIVATE_fieldPathFromDotSeparatedString","__PRIVATE_createError","DocumentSnapshot","QueryDocumentSnapshot","__PRIVATE_fieldPathFromArgument","QuerySnapshot","__PRIVATE_LiteUserDataWriter","getDocs"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}